      PROGRAM DR2END_AK						      PROGRAM DR2END_AK
C     FUER SMIN STATTDESSEN					C     FUER SMIN STATTDESSEN
CC    SUBROUTINE ENDMAT(EOV)					CC    SUBROUTINE ENDMAT(EOV)
      IMPLICIT double precision (A-H,O-Z)		      |	      IMPLICIT REAL*8 (A-H,O-Z)
C     STREU ENDMAT NUR FUER STREUPOTENTIALE (KEINE QUARKS!!!!	C     STREU ENDMAT NUR FUER STREUPOTENTIALE (KEINE QUARKS!!!!
C     ZUSAETZLICH FUER 3-N-POTENTIALE!!!!!!!!!			C     ZUSAETZLICH FUER 3-N-POTENTIALE!!!!!!!!!
C     VORBEREITET FUER SMIN 				      |	C     VORBEREITET FUER SMIN
C     JEWEILS SMIN SUCHEN UND NACH VORSCHRIFT HANDELN		C     JEWEILS SMIN SUCHEN UND NACH VORSCHRIFT HANDELN
C     DAMIT DIE COMMONBLOCKS STIMMEN MUSS 'par/DR2END_AK' dur	C     DAMIT DIE COMMONBLOCKS STIMMEN MUSS 'par/DR2END_AK' dur
C     WERDEN							C     WERDEN
C     FUER ZWEI SORTEN VON TEILCHENMASSEN			C     FUER ZWEI SORTEN VON TEILCHENMASSEN
C								C
C   NZOP=14 FUER SZ,BONN,AV14,AV18 POTENTIALE			C   NZOP=14 FUER SZ,BONN,AV14,AV18 POTENTIALE
C      NZOP=23 FUER ZUSATZLICH 3N-POTENTIALE			C      NZOP=23 FUER ZUSATZLICH 3N-POTENTIALE
C      NEU NZOP=31 FUER NEUES 3N-POTENTIAL			C      NEU NZOP=31 FUER NEUES 3N-POTENTIAL
C								C
C      2.6.89 UEBERLAGERUNG VON BASISVEKTOREN UNTERSCHIEDLICH	C      2.6.89 UEBERLAGERUNG VON BASISVEKTOREN UNTERSCHIEDLICH
C             TEILCHENZAHL FUER KEIND.LT.0 MOEGLICH,		C             TEILCHENZAHL FUER KEIND.LT.0 MOEGLICH,
C             FUER KEIND.LT.-1 WIRD BEI DISTORTIONSKANAELEN	C             FUER KEIND.LT.-1 WIRD BEI DISTORTIONSKANAELEN
C             DIE KANALSPINKOPPLUNG NICHT VERWENDET.         	C             DIE KANALSPINKOPPLUNG NICHT VERWENDET.         
C     10.4.90  NENTP=2 RUFT CHEPOK H.M.H.			C     10.4.90  NENTP=2 RUFT CHEPOK H.M.H.
C     19.2.91  FUER NZZ NEGATIV WERDEN ABS(NZZ)EIGENVEKTOREN 	C     19.2.91  FUER NZZ NEGATIV WERDEN ABS(NZZ)EIGENVEKTOREN 
C     8.10.91 NENTP=3 BINDUNGSRECHNUNG FUER GEKOPPELTE KANAEL	C     8.10.91 NENTP=3 BINDUNGSRECHNUNG FUER GEKOPPELTE KANAEL
C             UEBERGANG AUF RELATIV KOORDINATEN H.M.H.		C             UEBERGANG AUF RELATIV KOORDINATEN H.M.H.
C     1.4.92  BEI EINLESEN VON EIGENVEKTOREN, KANN DER ERSTE 	C     1.4.92  BEI EINLESEN VON EIGENVEKTOREN, KANN DER ERSTE 
C             IN PLOB AUSGEDRUCKT WERDEN H.M.H.			C             IN PLOB AUSGEDRUCKT WERDEN H.M.H.
C     2.6.92  FUER KEIND .LT.0 ERFOLGT BEI BINDUNGSRECHNUNG K	C     2.6.92  FUER KEIND .LT.0 ERFOLGT BEI BINDUNGSRECHNUNG K
C             ABFRAGE AUF SPIN,GESAMT-L UND RELATIV-L  H.M.H.	C             ABFRAGE AUF SPIN,GESAMT-L UND RELATIV-L  H.M.H.
C     27.9.95 UMKOP AUF F9J UMGESTELLT H.M.H.			C     27.9.95 UMKOP AUF F9J UMGESTELLT H.M.H.
C     23.5.96 ABFRAGE AUF QUAFMATRIXELEMENT GLEICH NULL VERSC	C     23.5.96 ABFRAGE AUF QUAFMATRIXELEMENT GLEICH NULL VERSC
C     12.7.96 SCRATCH-FILE BESEITIGT, MATRIX DM ERGAENZT, STR	C     12.7.96 SCRATCH-FILE BESEITIGT, MATRIX DM ERGAENZT, STR
C     9.9.98  BEI NN- UND NNN-WECHSELWIRKUNG WIRD DIE ANZAHL 	C     9.9.98  BEI NN- UND NNN-WECHSELWIRKUNG WIRD DIE ANZAHL 
C             UNTERSCHIEDEN H.M.H.				C             UNTERSCHIEDEN H.M.H.
C     16.5.00 FUER NEUES 3N-POTENTIAL MEHR OPERATOREN H.M.H.	C     16.5.00 FUER NEUES 3N-POTENTIAL MEHR OPERATOREN H.M.H.
C     22.1.03 AUSBAU VON LOOP KPUTZ, ES WIRD NUR NOCH EINMAL 	C     22.1.03 AUSBAU VON LOOP KPUTZ, ES WIRD NUR NOCH EINMAL 
C             GELESEN H.M.H.					C             GELESEN H.M.H.
C								C
C     FOLGENDE OPERATOREN WERDEN BERECHNET:			C     FOLGENDE OPERATOREN WERDEN BERECHNET:
C     1. NORM 							C     1. NORM 
C     2. KINETISCHE ENERGIE					C     2. KINETISCHE ENERGIE
C     3. COULOMB 						C     3. COULOMB 
C     4. ZENTRALPOTENTIALE 					C     4. ZENTRALPOTENTIALE 
C     5.  P-QUADRAT						C     5.  P-QUADRAT
C     6.  L-QUADRAT 						C     6.  L-QUADRAT 
C     7.  LS-QUADRAT SKALAR					C     7.  LS-QUADRAT SKALAR
C     8. SPIN-BAHN 						C     8. SPIN-BAHN 
C     9. LS-QUADRAT VEKTOR 					C     9. LS-QUADRAT VEKTOR 
C     10. TENSOR 						C     10. TENSOR 
C     11.  LS-QUADRAT TENSOR 					C     11.  LS-QUADRAT TENSOR 
C     12. ISO-TENSOR SKALAR					C     12. ISO-TENSOR SKALAR
C     13. ISO-TENSOR TENSOR					C     13. ISO-TENSOR TENSOR
C     14. CHARGE-ASYMMETRIC					C     14. CHARGE-ASYMMETRIC
C     15. OPERATOR: NORM  3TEILCHEN				C     15. OPERATOR: NORM  3TEILCHEN
C     16. OPERATOR: ZENTRAL					C     16. OPERATOR: ZENTRAL
C     17. OPERATOR: SPIN-SPIN ANTI				C     17. OPERATOR: SPIN-SPIN ANTI
C     18. OPERATOR: SPIN-SPIN KOM				C     18. OPERATOR: SPIN-SPIN KOM
C     19. OPERATOR: SPIN-TENSOR R_IK       ANTI			C     19. OPERATOR: SPIN-TENSOR R_IK       ANTI
C     20. OPERATOR: SPIN-TENSOR R_IJ       ANTI			C     20. OPERATOR: SPIN-TENSOR R_IJ       ANTI
C     21. OPERATOR: SPIN-TENSOR R_IK       KOM			C     21. OPERATOR: SPIN-TENSOR R_IK       KOM
C     22. OPERATOR: SPIN-TENSOR R_IJ       KOM			C     22. OPERATOR: SPIN-TENSOR R_IJ       KOM
C     23. OPERATOR: TENSOR-TENSOR RANG=0   ANTI			C     23. OPERATOR: TENSOR-TENSOR RANG=0   ANTI
C     24. OPERATOR: TENSOR-TENSOR RANG=0   KOM			C     24. OPERATOR: TENSOR-TENSOR RANG=0   KOM
C     25. OPERATOR: TENSOR-TENSOR RANG=1   ANTI			C     25. OPERATOR: TENSOR-TENSOR RANG=1   ANTI
C     26. OPERATOR: TENSOR-TENSOR RANG=1   KOM			C     26. OPERATOR: TENSOR-TENSOR RANG=1   KOM
C     27. OPERATOR: TENSOR-TENSOR RANG=2   ANTI			C     27. OPERATOR: TENSOR-TENSOR RANG=2   ANTI
C     28. OPERATOR: TENSOR-TENSOR RANG=2   KOM			C     28. OPERATOR: TENSOR-TENSOR RANG=2   KOM
C     29. OPERATOR: TENSOR-TENSOR RANG=3   KOM			C     29. OPERATOR: TENSOR-TENSOR RANG=3   KOM
C     30. OPERATOR: SPIN-SPIN VPVS				C     30. OPERATOR: SPIN-SPIN VPVS
C     31. OPERATOR: TENSOR R_IK VPVS				C     31. OPERATOR: TENSOR R_IK VPVS
C								C
C    FALLS TNI UNGESPLITTET					C    FALLS TNI UNGESPLITTET
C     17. OPERATOR: SPIN-SPIN					C     17. OPERATOR: SPIN-SPIN
C     18. OPERATOR: SPIN-TENSOR R_IK				C     18. OPERATOR: SPIN-TENSOR R_IK
C     19. OPERATOR: SPIN-TENSOR R_IJ				C     19. OPERATOR: SPIN-TENSOR R_IJ
C     20. OPERATOR: TENSOR-TENSOR RANG=0			C     20. OPERATOR: TENSOR-TENSOR RANG=0
C     21. OPERATOR: TENSOR-TENSOR RANG=1			C     21. OPERATOR: TENSOR-TENSOR RANG=1
C     22. OPERATOR: TENSOR-TENSOR RANG=2			C     22. OPERATOR: TENSOR-TENSOR RANG=2
C     23. OPERATOR: TENSOR-TENSOR RANG=3			C     23. OPERATOR: TENSOR-TENSOR RANG=3
C								C
C								C
        INCLUDE 'par/DR2END_AK'					        INCLUDE 'par/DR2END_AK'
C								C
C     NZOPER: MAXIMALE ANZAHL DER OPERATOREN IN ENDMAT		C     NZOPER: MAXIMALE ANZAHL DER OPERATOREN IN ENDMAT
C     MZPARM:     "      "     "  RADIALRARAMETER		C     MZPARM:     "      "     "  RADIALRARAMETER
C     NZKMAX:     "      "     "  KANAELE			C     NZKMAX:     "      "     "  KANAELE
C     NZBMAX:     "      "     "  BASISVEKTOREN AUS QUAF	C     NZBMAX:     "      "     "  BASISVEKTOREN AUS QUAF
C     NZUMAX:     "      "     "  UEBERLAGERUGNSKOEFFIZIENTEN	C     NZUMAX:     "      "     "  UEBERLAGERUGNSKOEFFIZIENTEN
C     NZFMAX:     "      "     "  ZERLEGUNGEN			C     NZFMAX:     "      "     "  ZERLEGUNGEN
C     NDIMD:     "      "     "  AUSGEDRUCKTEN EIGENFUNKTIONE |	C     NZZMAX:     "      "     "  AUSGEDRUCKTEN EIGENFUNKTION
C     NDIMD  :     "      "     "  RADIALPARAMETER*KANAELE	C     NDIMD  :     "      "     "  RADIALPARAMETER*KANAELE
C                                 NDIMD.LE.MZPARM*NZKMAX	C                                 NDIMD.LE.MZPARM*NZKMAX
C								C
      COMMON /COMY/ D(100)					      COMMON /COMY/ D(100)
C								C
      COMMON /PARA/ PAR(MZPARM,NZKMAX),NAR(MZPARM,NZKMAX)	      COMMON /PARA/ PAR(MZPARM,NZKMAX),NAR(MZPARM,NZKMAX)
C								C
      COMMON /POKA/ B, IKAPO(NZKMAX),IZP(NZKMAX),IZQ(NZKMAX+1	      COMMON /POKA/ B, IKAPO(NZKMAX),IZP(NZKMAX),IZQ(NZKMAX+1
     *               NZKAPO,KAPO(NZKMAX),IZPWM			     *               NZKAPO,KAPO(NZKMAX),IZPWM
C								C
      COMMON /BIGG/ DM(NDIMD,NDIMD,2,2)				      COMMON /BIGG/ DM(NDIMD,NDIMD,2,2)
C            DM(.,.,1,.) ENTHAELT BEITRAEGE UEBER FRAGMENTGRE	C            DM(.,.,1,.) ENTHAELT BEITRAEGE UEBER FRAGMENTGRE
C            DM(.,.,2,.) ENTHAELT ALLE BEITRAEGE		C            DM(.,.,2,.) ENTHAELT ALLE BEITRAEGE
C            DM(.,.,.,1) ENTHAELT NORM				C            DM(.,.,.,1) ENTHAELT NORM
C            DM(.,.,.,2) ENTHAELT HAMILTONIAN			C            DM(.,.,.,2) ENTHAELT HAMILTONIAN
C								C
      COMMON /DREH/ MLWERT(5,NZBMAX),JWERT(3,NZKMAX),		      COMMON /DREH/ MLWERT(5,NZBMAX),JWERT(3,NZKMAX),
     *              MMS(3,NZBMAX),JWS				     *              MMS(3,NZBMAX),JWS
C								C
      COMMON /SHIFT/ ES(NZKMAX),IABLK,NKANB(NZKMAX)		      COMMON /SHIFT/ ES(NZKMAX),IABLK,NKANB(NZKMAX)
C								C
      COMMON /UMNO/ REDM(NZKMAX), NZKA, NZKB, MMM, 		      COMMON /UMNO/ REDM(NZKMAX), NZKA, NZKB, MMM, 
     *              NZQ(NZKMAX+1), LWERT(5,NZKMAX), 		     *              NZQ(NZKMAX+1), LWERT(5,NZKMAX), 
     *              KPK(NZKMAX), MASSE(2,NZKMAX)		     *              KPK(NZKMAX), MASSE(2,NZKMAX)
C								C
      COMMON /FAKUL/ FAKU(13)					      COMMON /FAKUL/ FAKU(13)
C								C
      COMMON /PLO/ SNORM(NZKMAX), QQN(NDIMD), SWW		      COMMON /PLO/ SNORM(NZKMAX), QQN(NDIMD), SWW
C								C
      COMMON /KAN/ OPWERT(NZOPER+2,NDIMD), WNORM(NZKMAX),	      COMMON /KAN/ OPWERT(NZOPER+2,NDIMD), WNORM(NZKMAX),
     *             NZP(NZKMAX), EBIN(NZKMAX), MLAD(2,NZKMAX),	     *             NZP(NZKMAX), EBIN(NZKMAX), MLAD(2,NZKMAX),
     *             H2M, E2R0 ,					     *             H2M, E2R0 ,
     *  RUHM(2,NZKMAX), EBIN1(NZKMAX), NREL			     *  RUHM(2,NZKMAX), EBIN1(NZKMAX), NREL
C								C
      COMMON QQ(NDIMD,NDIMD),				      |	      COMMON QQ(NDIMD,NZZMAX),
     *       INPUT, NBAND3, NBAND9, NENTP, NZZ, IAUW,		     *       INPUT, NBAND3, NBAND9, NENTP, NZZ, IAUW,
     *       IDRU, NB15, IPLO					     *       IDRU, NB15, IPLO
C								C
      DIMENSION KPB(NZBMAX),  LREG(NZOPER), NZPAQ(NZBMAX),	      DIMENSION KPB(NZBMAX),  LREG(NZOPER), NZPAQ(NZBMAX),
     *          MMASSE(2,NZBMAX), MMLAD(2,NZBMAX), E2K(NZKMAX	     *          MMASSE(2,NZBMAX), MMLAD(2,NZBMAX), E2K(NZKMAX
     *          PAQ(MZPARM,NZBMAX), MS(3,NZKMAX), NKAENT(NZKM	     *          PAQ(MZPARM,NZBMAX), MS(3,NZKMAX), NKAENT(NZKM
     *          LUM(MZPARM+1,NZKMAX), DN(MZPARM,MZPARM,2),	     *          LUM(MZPARM+1,NZKMAX), DN(MZPARM,MZPARM,2),
     *          NZRHO(NZFMAX), MREG(NZOPER), KANUM(NZBMAX,KKM	     *          NZRHO(NZFMAX), MREG(NZOPER), KANUM(NZBMAX,KKM
     *          OPW(NZOPER), UMKOF(NZKMAX,NZBMAX), JKK(NZBMAX	     *          OPW(NZOPER), UMKOF(NZKMAX,NZBMAX), JKK(NZBMAX
      DIMENSION OBWERT(NZOPER+2,NDIMD,NDIMD),		      |	      DIMENSION OBWERT(NZOPER+2,NZZMAX,NZZMAX),
     *          NUMK(NDIMD), UMK(NZBMAX), POTFAK(NZOPER),	     *          NUMK(NDIMD), UMK(NZBMAX), POTFAK(NZOPER),
     *          MUMK(NZBMAX), UNK(NZUMAX), NCOF(NZBMAX,NZKMAX	     *          MUMK(NZBMAX), UNK(NZUMAX), NCOF(NZBMAX,NZKMAX
C								C
C								C
      CHARACTER*36 VARFOR(NZOPER), UNSPLIT(7)			      CHARACTER*36 VARFOR(NZOPER), UNSPLIT(7)
C								C
      CHARACTER*10 CHINT(2)					      CHARACTER*10 CHINT(2)
      DATA CHINT /'(26I3)','(20I4)'/				      DATA CHINT /'(26I3)','(20I4)'/
C								C
      DATA VARFOR/        '('' NORM !!!!             '',F16.7	      DATA VARFOR/        '('' NORM !!!!             '',F16.7
     2'('' KINETISCHE ENERGIE =  '',F16.7)',			     2'('' KINETISCHE ENERGIE =  '',F16.7)',
     3'('' COULOMB ENERGIE=      '',F16.7)',			     3'('' COULOMB ENERGIE=      '',F16.7)',
     4'('' ZENTRAL ENERGIE=      '',F16.7)',			     4'('' ZENTRAL ENERGIE=      '',F16.7)',
     4'('' P-QUADRAT    =        '',F16.7)',			     4'('' P-QUADRAT    =        '',F16.7)',
     5'('' L-QUADRAT    =        '',F16.7)', 			     5'('' L-QUADRAT    =        '',F16.7)', 
     5'('' LS**2 SKALAR  =       '',F16.7)',			     5'('' LS**2 SKALAR  =       '',F16.7)',
     6'('' SPINBAHN ENERGIE =    '',F16.7)', 			     6'('' SPINBAHN ENERGIE =    '',F16.7)', 
     6'('' LS**2 VEKTOR   =      '',F16.7)',			     6'('' LS**2 VEKTOR   =      '',F16.7)',
     7'('' TENSOR ENERGIE =      '',F16.7)', 			     7'('' TENSOR ENERGIE =      '',F16.7)', 
     7'('' LS**2 TENSOR   =      '',F16.7)',			     7'('' LS**2 TENSOR   =      '',F16.7)',
     *'('' ISO-TENSOR SKA =      '',F16.7)',			     *'('' ISO-TENSOR SKA =      '',F16.7)',
     *'('' ISO-TENSOR TEN =      '',F16.7)',			     *'('' ISO-TENSOR TEN =      '',F16.7)',
     *'('' CHARGE ASYMMET =      '',F16.7)',			     *'('' CHARGE ASYMMET =      '',F16.7)',
     *'('' NORM      3TEIL=      '',F16.7)',			     *'('' NORM      3TEIL=      '',F16.7)',
     *'('' ZENTRAL  3TEIL =      '',F16.7)',			     *'('' ZENTRAL  3TEIL =      '',F16.7)',
     *'('' S-S-POTENTIAL 3N AK = '',F16.7)',			     *'('' S-S-POTENTIAL 3N AK = '',F16.7)',
     *'('' S-S-POTENTIAL 3N KO = '',F16.7)',			     *'('' S-S-POTENTIAL 3N KO = '',F16.7)',
     *'('' S-T-POTENTIAL IK 3N A '',F16.7)',			     *'('' S-T-POTENTIAL IK 3N A '',F16.7)',
     *'('' S-T-POTENTIAL IJ 3N A '',F16.7)',			     *'('' S-T-POTENTIAL IJ 3N A '',F16.7)',
     *'('' S-T-POTENTIAL IK 3N K '',F16.7)',			     *'('' S-T-POTENTIAL IK 3N K '',F16.7)',
     *'('' S-T-POTENTIAL IJ 3N K '',F16.7)',			     *'('' S-T-POTENTIAL IJ 3N K '',F16.7)',
     *'('' TENSOR-T RANG=0  3N A '',F16.7)',			     *'('' TENSOR-T RANG=0  3N A '',F16.7)',
     *'('' TENSOR-T RANG=0  3N K '',F16.7)',			     *'('' TENSOR-T RANG=0  3N K '',F16.7)',
     *'('' TENSOR-T RANG=1  3N A '',F16.7)',			     *'('' TENSOR-T RANG=1  3N A '',F16.7)',
     *'('' TENSOR-T RANG=1  3N K '',F16.7)',			     *'('' TENSOR-T RANG=1  3N K '',F16.7)',
     *'('' TENSOR-T RANG=2  3N A '',F16.7)',			     *'('' TENSOR-T RANG=2  3N A '',F16.7)',
     *'('' TENSOR-T RANG=2  3N K '',F16.7)',			     *'('' TENSOR-T RANG=2  3N K '',F16.7)',
     *'('' TENSOR-T RANG=3  3N K '',F16.7)',			     *'('' TENSOR-T RANG=3  3N K '',F16.7)',
     *'('' S-S-POTENTIAL 3N VPVS '',F16.7)',			     *'('' S-S-POTENTIAL 3N VPVS '',F16.7)',
     *'('' T-POTENTIAL IK 3N VP  '',F16.7)'/			     *'('' T-POTENTIAL IK 3N VP  '',F16.7)'/
C								C
      DATA UNSPLIT/						      DATA UNSPLIT/
     *'('' S-S-POTENTIAL 3N =    '',F16.7)',			     *'('' S-S-POTENTIAL 3N =    '',F16.7)',
     *'('' S-T-POTENTIAL IK 3N = '',F16.7)',			     *'('' S-T-POTENTIAL IK 3N = '',F16.7)',
     *'('' S-T-POTENTIAL IJ 3N = '',F16.7)',			     *'('' S-T-POTENTIAL IJ 3N = '',F16.7)',
     *'('' TENSOR-T RANG=0  3N = '',F16.7)',			     *'('' TENSOR-T RANG=0  3N = '',F16.7)',
     *'('' TENSOR-T RANG=1  3N = '',F16.7)',			     *'('' TENSOR-T RANG=1  3N = '',F16.7)',
     *'('' TENSOR-T RANG=2  3N = '',F16.7)',			     *'('' TENSOR-T RANG=2  3N = '',F16.7)',
     *'('' TENSOR-T RANG=3  3N = '',F16.7)'/			     *'('' TENSOR-T RANG=3  3N = '',F16.7)'/
C								C
      OPEN(UNIT=5,FILE='INEN',STATUS='OLD')			      OPEN(UNIT=5,FILE='INEN',STATUS='OLD')
C								C
      OPEN(UNIT=NOUT,FILE='OUTPUT')				      OPEN(UNIT=NOUT,FILE='OUTPUT')
C     FUER SMIN SIND DIESE OPEN STATEMENTS ZU BESEITIGEN	C     FUER SMIN SIND DIESE OPEN STATEMENTS ZU BESEITIGEN
C								C
 1002 FORMAT(40I3)						 1002 FORMAT(40I3)
 1005 FORMAT(10H ES WERDEN,I3,20H KANAELE BETRACHTET //)	 1005 FORMAT(10H ES WERDEN,I3,20H KANAELE BETRACHTET //)
 6071 FORMAT(//,20H GESAMTDREHIMPULS = ,I3,3H /2 ,14H  PARITA	 6071 FORMAT(//,20H GESAMTDREHIMPULS = ,I3,3H /2 ,14H  PARITA
 1004 FORMAT(20H GESAMTDREHIMPULS = ,I3,3H /2 ,14H  PARITAET 	 1004 FORMAT(20H GESAMTDREHIMPULS = ,I3,3H /2 ,14H  PARITAET 
 1006 FORMAT(' FEHLER IN DEN EINGABEDATEN, IM KANAL',I4,' IST	 1006 FORMAT(' FEHLER IN DEN EINGABEDATEN, IM KANAL',I4,' IST
     1       ' FALSCH')						     1       ' FALSCH')
 1007 FORMAT(//15H DEFINITION DES,I3,15H TEN KANALS IST/	 1007 FORMAT(//15H DEFINITION DES,I3,15H TEN KANALS IST/
     1 ' CHANNEL SPIN =',I3,'/2 RADIALDREHIMPULS =',I3,' POLY	     1 ' CHANNEL SPIN =',I3,'/2 RADIALDREHIMPULS =',I3,' POLY
     2 I3,/,' SPINS DER REAKTIONSPARTNER =',I1,3H /2,' UND ',	     2 I3,/,' SPINS DER REAKTIONSPARTNER =',I1,3H /2,' UND ',
     3 32H MASSEN   DER REAKTIONSPARTNER =,I4,4H UND,I4,	     3 32H MASSEN   DER REAKTIONSPARTNER =,I4,4H UND,I4,
     4 16H NUKLEONENMASSEN/					     4 16H NUKLEONENMASSEN/
     5 32H LADUNGEN DER REAKTIONSPARTNER =,I4,4H UND,I4,	     5 32H LADUNGEN DER REAKTIONSPARTNER =,I4,4H UND,I4,
     6 18H ELEMENTARLADUNGEN  /					     6 18H ELEMENTARLADUNGEN  /
     7   39H ABFALLPARAMETER IN DER RELATIVFUNKTION,		     7   39H ABFALLPARAMETER IN DER RELATIVFUNKTION,
     8   5(/1P10E12.4))						     8   5(/1P10E12.4))
 1011 FORMAT(30H BENUTZTE RADIALFUNKTIONEN      /20I3)		 1011 FORMAT(30H BENUTZTE RADIALFUNKTIONEN      /20I3)
 1018 FORMAT (2H0/,I3,4H ) =,4(F10.4,2H /,I3,2H )),		 1018 FORMAT (2H0/,I3,4H ) =,4(F10.4,2H /,I3,2H )),
     1   30(/,9X,4(F10.4,2H /,I3,2H ))))			     1   30(/,9X,4(F10.4,2H /,I3,2H ))))
 1009 FORMAT(//4H DER,I3,21H TE PARAMETERSATZ DER,I4,		 1009 FORMAT(//4H DER,I3,21H TE PARAMETERSATZ DER,I4,
     1 17H TEN STRUKTUR = /,I4,10H ) LIEFERT)			     1 17H TEN STRUKTUR = /,I4,10H ) LIEFERT)
1008  FORMAT(22H GESAMTE     ENERGIE =,F16.7/)			1008  FORMAT(22H GESAMTE     ENERGIE =,F16.7/)
      IEINS=1							      IEINS=1
      INPUT=5							      INPUT=5
      NBAND9=9							      NBAND9=9
      NB15=15							      NB15=15
      MATOU=19							      MATOU=19
C								C
      FAKU(1)=1.						      FAKU(1)=1.
      DO 10, I=2, 13						      DO 10, I=2, 13
       FAKU(I)=FAKU(I-1)*DBLE(I)				       FAKU(I)=FAKU(I-1)*DBLE(I)
10    CONTINUE							10    CONTINUE
C     FAKU(I)=DBLE(I!!)						C     FAKU(I)=DBLE(I!!)
C      WRITE (NOUT,1111)				      |	      WRITE (NOUT,1111)
 1111 FORMAT(' STREU ENDMAT VOM 29.6.00')			 1111 FORMAT(' STREU ENDMAT VOM 29.6.00')	
C								C
      D(1)=.0							      D(1)=.0
      D(2)=.0							      D(2)=.0
      DO 199 I=2,99						      DO 199 I=2,99
      HMHH=I							      HMHH=I
  199 D(I+1)=LOG(HMHH)+D(I)					  199 D(I+1)=LOG(HMHH)+D(I)
      READ(INPUT,1002) NBAND1,IDUM,NBAND3,NZOP,IFAKD		      READ(INPUT,1002) NBAND1,IDUM,NBAND3,NZOP,IFAKD
     1   ,IGAK,NZZ,IAUW,IDRU,IPLO,IDUN,ICOPMA			     1   ,IGAK,NZZ,IAUW,IDRU,IPLO,IDUN,ICOPMA
C								C
      IF(IPLO.GE.0) OPEN(UNIT=9,FILE='NORMOUT',STATUS='UNKNOW	      IF(IPLO.GE.0) OPEN(UNIT=9,FILE='NORMOUT',STATUS='UNKNOW
     1                  FORM='UNFORMATTED')			     1                  FORM='UNFORMATTED')
      IF(IPLO.GT.0) OPEN(UNIT=15,FILE='PLOTOUT',STATUS='UNKNO	      IF(IPLO.GT.0) OPEN(UNIT=15,FILE='PLOTOUT',STATUS='UNKNO
     1              FORM='UNFORMATTED')				     1              FORM='UNFORMATTED')
C								C
      IZWEI=0							      IZWEI=0
      IDREI=0							      IDREI=0
      IF(NBAND1.GT.0)  THEN					      IF(NBAND1.GT.0)  THEN
          OPEN(UNIT=10,FILE='QUAOUT',STATUS='OLD',FORM='UNFOR	          OPEN(UNIT=10,FILE='QUAOUT',STATUS='OLD',FORM='UNFOR
          IZWEI=1						          IZWEI=1
          endif							          endif
      IDREI=0							      IDREI=0
      IF(ABS(NBAND1).GT.10)  THEN				      IF(ABS(NBAND1).GT.10)  THEN
        OPEN(UNIT=11,FILE='DRQUAOUT',STATUS='OLD',FORM='UNFOR	        OPEN(UNIT=11,FILE='DRQUAOUT',STATUS='OLD',FORM='UNFOR
          IDREI=1						          IDREI=1
          endif							          endif
      IF(IDUM.NE.2) IDUM=1					      IF(IDUM.NE.2) IDUM=1
C     IDUM=2 WAEHLT FORMAT 20I4 FALLS MEHR ALS 999 KANAELE OD	C     IDUM=2 WAEHLT FORMAT 20I4 FALLS MEHR ALS 999 KANAELE OD
C								C
      IF(ICOPMA.GT.0)WRITE(NOUT,*) ' DM-MATRIZEN WERDEN AUF M	      IF(ICOPMA.GT.0)WRITE(NOUT,*) ' DM-MATRIZEN WERDEN AUF M
     *KOPIERT'							     *KOPIERT'
C     NBAND1 KOMMT VON QUAFORM					C     NBAND1 KOMMT VON QUAFORM
C     NBAND3 GEHT AN VERSTR (NUR BEI STREURECHNUNG)		C     NBAND3 GEHT AN VERSTR (NUR BEI STREURECHNUNG)
C								C
C      FUER NZZ<0 WERDEN IABS(NZZ)EIGENVEKTOREN EINGELESEN	C      FUER NZZ<0 WERDEN IABS(NZZ)EIGENVEKTOREN EINGELESEN
       NEIGIN=0							       NEIGIN=0
       IF(NZZ.LT.0) NEIGIN=1					       IF(NZZ.LT.0) NEIGIN=1
       NZZ=IABS(NZZ)						       NZZ=IABS(NZZ)
C      IAUW NE 0, STEUERT EINLESEN IN ORTHO, WELCHER SPEZIELL	C      IAUW NE 0, STEUERT EINLESEN IN ORTHO, WELCHER SPEZIELL
C      EIGENVEKTOR ENTWICKELT WERDEN SOLL			C      EIGENVEKTOR ENTWICKELT WERDEN SOLL
C      IPLO= -1 NOKEHA UND PLOB WERDEN NICHT GERUFEN		C      IPLO= -1 NOKEHA UND PLOB WERDEN NICHT GERUFEN
C      IPLO .GE. 0 NOKEHA WIRD GERUFEN				C      IPLO .GE. 0 NOKEHA WIRD GERUFEN
C      IPLO .GT. 0 PLOB WIRD GERUFEN				C      IPLO .GT. 0 PLOB WIRD GERUFEN
C								C
      IF (NZOP.NE.14 .AND. NZOP.NE.23 .AND. NZOP.NE.29 .AND.	      IF (NZOP.NE.14 .AND. NZOP.NE.23 .AND. NZOP.NE.29 .AND.
     *    NZOP.NE.31)  STOP 2					     *    NZOP.NE.31)  STOP 2
      IF(NZOP.EQ.23) THEN					      IF(NZOP.EQ.23) THEN
          DO 137 K=1,7						          DO 137 K=1,7
137       VARFOR(16+K)=UNSPLIT(K)				137       VARFOR(16+K)=UNSPLIT(K)
      ENDIF							      ENDIF
      READ(INPUT,1002) (MREG(K),K=1,NZOP)			      READ(INPUT,1002) (MREG(K),K=1,NZOP)
      IF(IZWEI.EQ.1) MREG(15)=0					      IF(IZWEI.EQ.1) MREG(15)=0
C								C
      DO 110 K=1,NZOP						      DO 110 K=1,NZOP
  110 POTFAK(K) =1.						  110 POTFAK(K) =1.
C								C
      H2M=(2.72099*.529172*137.0373)**2/(938.211+939.505)	      H2M=(2.72099*.529172*137.0373)**2/(938.211+939.505)
C     H2M=197.31613**2/(938.211+939.505)			C     H2M=197.31613**2/(938.211+939.505)
      E2R0=.51098*2.81785					      E2R0=.51098*2.81785
C     E2R0=197.31613/137.0373					C     E2R0=197.31613/137.0373
      IF(IFAKD.LE.0) GOTO 111					      IF(IFAKD.LE.0) GOTO 111
      READ(INPUT,1113) (POTFAK(K),K=3,NZOP)			      READ(INPUT,1113) (POTFAK(K),K=3,NZOP)
      WRITE (NOUT,1113) (POTFAK(K) ,K=3,NZOP)			      WRITE (NOUT,1113) (POTFAK(K) ,K=3,NZOP)
1113  FORMAT(  7E12.4)						1113  FORMAT(  7E12.4)
111   MREG(1)=1							111   MREG(1)=1
      NBAND1=ABS(NBAND1)					      NBAND1=ABS(NBAND1)
      NZBASV2=0							      NZBASV2=0
      NZBASV3=0							      NZBASV3=0
      REWIND 10							      REWIND 10
      REWIND 11							      REWIND 11
      DO 113 K=1,NZOP						      DO 113 K=1,NZOP
113   LREG(K)=0							113   LREG(K)=0
      IF(IZWEI.EQ.1) READ(10) NZF,(LREG(K),K=1,14),NZBASV2,	      IF(IZWEI.EQ.1) READ(10) NZF,(LREG(K),K=1,14),NZBASV2,
     1  (NZRHO(K),K=1,NZF)					     1  (NZRHO(K),K=1,NZF)
      IF(IDREI.EQ.1) READ(11) NZF,(LREG(K),K=15,NZOPER),NZBAS	      IF(IDREI.EQ.1) READ(11) NZF,(LREG(K),K=15,NZOPER),NZBAS
     1  (NZRHO(K),K=1,NZF)					     1  (NZRHO(K),K=1,NZF)
      IF(IZWEI+IDREI.EQ.2) THEN					      IF(IZWEI+IDREI.EQ.2) THEN
      NZBASV=MIN(NZBASV2,NZBASV3)				      NZBASV=MIN(NZBASV2,NZBASV3)
      ELSE							      ELSE
      NZBASV=MAX(NZBASV2,NZBASV3)				      NZBASV=MAX(NZBASV2,NZBASV3)
      END IF							      END IF
      IF(NZBASV.GT.NZBMAX)  GOTO 808				      IF(NZBASV.GT.NZBMAX)  GOTO 808
      DO 1 N=1,NZBASV						      DO 1 N=1,NZBASV
      READ(NBAND1) MM,(MMASSE(J,N),J=1,2),(MMLAD(J,N),J=1,2),	      READ(NBAND1) MM,(MMASSE(J,N),J=1,2),(MMLAD(J,N),J=1,2),
     1 (MMS(J,N),J=1,3),(MLWERT(J,N),J=1,5),(PAQ(J,N),J=1,MM)	     1 (MMS(J,N),J=1,3),(MLWERT(J,N),J=1,5),(PAQ(J,N),J=1,MM)
      JKK(N)=0							      JKK(N)=0
      NZPAQ(N)=MM						      NZPAQ(N)=MM
      IF (IGAK.EQ.0) GOTO 1					      IF (IGAK.EQ.0) GOTO 1
      WRITE(NOUT,196) N,(MMASSE(J,N),J=1,2),(MMLAD(J,N),J=1,2	      WRITE(NOUT,196) N,(MMASSE(J,N),J=1,2),(MMLAD(J,N),J=1,2
     1     (MMS(J,N),J=1,3),(MLWERT(J,N),J=1,5),KPB(N)		     1     (MMS(J,N),J=1,3),(MLWERT(J,N),J=1,5),KPB(N)
  196 FORMAT(/I6/2(I6,I3),I6,2I3,I6,4I3,I6)			  196 FORMAT(/I6/2(I6,I3),I6,2I3,I6,4I3,I6)
    1 CONTINUE							    1 CONTINUE
      DO 197 K=1,KKMAX						      DO 197 K=1,KKMAX
      DO 197 N=1,NZBASV						      DO 197 N=1,NZBASV
197   KANUM(N,K)=0						197   KANUM(N,K)=0
C								C
      READ(INPUT,CHINT(IDUM)) JWS,NZKA,NENTP,KAUSD,NPARI,KEIN	      READ(INPUT,CHINT(IDUM)) JWS,NZKA,NENTP,KAUSD,NPARI,KEIN
     *                        NZKAPO,NREL,IABLK			     *                        NZKAPO,NREL,IABLK
      IF(NENTP.EQ.0) OPEN(UNIT=12,FILE='ENOUT',STATUS='UNKNOW	      IF(NENTP.EQ.0) OPEN(UNIT=12,FILE='ENOUT',STATUS='UNKNOW
     *               FORM='UNFORMATTED')			     *               FORM='UNFORMATTED')
      IF(NREL.EQ.1) WRITE(NOUT,*)' KEINE RELATIVISTIK MOEGLIC	      IF(NREL.EQ.1) WRITE(NOUT,*)' KEINE RELATIVISTIK MOEGLIC
C     NREL=1: REL. KIN. ENERGIE AUF RELATIVBEWEGUNG		C     NREL=1: REL. KIN. ENERGIE AUF RELATIVBEWEGUNG
C     IABLK=ANZAHL DER BLOECKE IN DER NORMMATRIX FUER SCHWELL	C     IABLK=ANZAHL DER BLOECKE IN DER NORMMATRIX FUER SCHWELL
      DO 771 I77=1,NZKA						      DO 771 I77=1,NZKA
      EBIN(I77) = 0.						      EBIN(I77) = 0.
 771  SNORM(I77)= 1.						 771  SNORM(I77)= 1.
      DO 772 MH=1,NZKA						      DO 772 MH=1,NZKA
      DO 772 NH=1,MZPARM					      DO 772 NH=1,MZPARM
 772  LUM(NH,MH) = 0						 772  LUM(NH,MH) = 0
      IF(IPLO.GT.0.AND.NENTP.NE.0) READ(INPUT,1113)		      IF(IPLO.GT.0.AND.NENTP.NE.0) READ(INPUT,1113)
     1  (SNORM(KL),KL=1,NZKA),SWW				     1  (SNORM(KL),KL=1,NZKA),SWW
C     IF(SWW.EQ.0.) SWW=0.1					C     IF(SWW.EQ.0.) SWW=0.1
C      NENTP=0,1,2,  3						C      NENTP=0,1,2,  3
C     MIT POLYNOMEN IST NUR NOCH DIE WAHL NENTP=0 UND 1 ZULAE	C     MIT POLYNOMEN IST NUR NOCH DIE WAHL NENTP=0 UND 1 ZULAE
C      NENTP=0,   STREURECHNUNG					C      NENTP=0,   STREURECHNUNG
C      NENTP=1,   BINDUNGSRECHNUNG FUER UNGEKOPPELTE FUNKTION	C      NENTP=1,   BINDUNGSRECHNUNG FUER UNGEKOPPELTE FUNKTION
C      MIT ENERGIEN DER PARAMETERSAETZE,ENTWICKLUNG DER EIGEN	C      MIT ENERGIEN DER PARAMETERSAETZE,ENTWICKLUNG DER EIGEN
C      UEBERLAPP MIT NORMIERTEN FUNKTIONEN UND KANAELEN		C      UEBERLAPP MIT NORMIERTEN FUNKTIONEN UND KANAELEN
C      NENTP=2,  BINDUNGSRECHNUNG FUER GEKOPPELTE FUNKTIONEN	C      NENTP=2,  BINDUNGSRECHNUNG FUER GEKOPPELTE FUNKTIONEN
C      ENERGIEN DER PARAMETERSAETZE WERDEN NICHT BERECHNET,SO	C      ENERGIEN DER PARAMETERSAETZE WERDEN NICHT BERECHNET,SO
C      NENTP=3,  BINDUNGSRECHNUNG FUER GEKOPPELTE FUNKTIONEN	C      NENTP=3,  BINDUNGSRECHNUNG FUER GEKOPPELTE FUNKTIONEN
C      NORM UND HAMILTONIAN WERDEN NICHT MIT B UMNORMIERT, FU	C      NORM UND HAMILTONIAN WERDEN NICHT MIT B UMNORMIERT, FU
C      RECHNUNGEN, SONST WIE NENTP=1				C      RECHNUNGEN, SONST WIE NENTP=1
C      NZKAPO = ANZAHL DER POLYNOMKANAELE			C      NZKAPO = ANZAHL DER POLYNOMKANAELE
      IF(NZKA.GT.NZKMAX)  GOTO 901				      IF(NZKA.GT.NZKMAX)  GOTO 901
C								C
      IF(NPARI.EQ.1) GOTO 6070					      IF(NPARI.EQ.1) GOTO 6070
      WRITE(NOUT,1004) JWS					      WRITE(NOUT,1004) JWS
      GO TO 6081						      GO TO 6081
 6070 WRITE(NOUT,6071) JWS					 6070 WRITE(NOUT,6071) JWS
6081  DO 112 K=2,NZOP						6081  DO 112 K=2,NZOP
      IF(ABS(POTFAK(K)).NE.0.) GOTO 112				      IF(ABS(POTFAK(K)).NE.0.) GOTO 112
      MREG(K)=0							      MREG(K)=0
112   MREG(K)=MREG(K)*LREG(K)					112   MREG(K)=MREG(K)*LREG(K)
      WRITE(NOUT,1010) (MREG(K),K=1,NZOP)			      WRITE(NOUT,1010) (MREG(K),K=1,NZOP)
 1010 FORMAT(' OPERATOREN ',/,(10I3))				 1010 FORMAT(' OPERATOREN ',/,(10I3))
      IF (KEIND.EQ.0) GOTO 198					      IF (KEIND.EQ.0) GOTO 198
      READ (INPUT,CHINT(IDUM)) KK				      READ (INPUT,CHINT(IDUM)) KK
      IF (KK.GT.NZUMAX) STOP 3					      IF (KK.GT.NZUMAX) STOP 3
      READ (INPUT,602) (UNK(J),J=1,KK)				      READ (INPUT,602) (UNK(J),J=1,KK)
  602 FORMAT(E20.12)						  602 FORMAT(E20.12)
      IF(KEIND.LT.0) READ(INPUT,1113) (EBIN(J),J=1,NZKA)	      IF(KEIND.LT.0) READ(INPUT,1113) (EBIN(J),J=1,NZKA)
C     DIESES EINLESEN DER BINDUNGSENERGIEN DIENT ZUM BERUECKS	C     DIESES EINLESEN DER BINDUNGSENERGIEN DIENT ZUM BERUECKS
C     VON INTERNEN BEITRAEHEN BEI SEA-QUARKS			C     VON INTERNEN BEITRAEHEN BEI SEA-QUARKS
 198  CONTINUE							 198  CONTINUE
      KBVM=0							      KBVM=0
C								C
C     EINLESEN DER KANADEFINITIONEN				C     EINLESEN DER KANADEFINITIONEN
      IF (NENTP.EQ.1) GOTO 4					      IF (NENTP.EQ.1) GOTO 4
C								C
C     STREURECHNUNG UND BINDUNGRECHNUNG MIT KANALSPINKOPPLUNG	C     STREURECHNUNG UND BINDUNGRECHNUNG MIT KANALSPINKOPPLUNG
      WRITE(NOUT,1005) NZKA					      WRITE(NOUT,1005) NZKA
      DO 7 N=1,NZKA						      DO 7 N=1,NZKA
      DO 190 J=1,NZBASV						      DO 190 J=1,NZBASV
 190  NCOF(J,N) = 0						 190  NCOF(J,N) = 0
      READ (INPUT,1002) (JWERT(M,N),M=1,3),NKAENT(N),IKAPO(N)	      READ (INPUT,1002) (JWERT(M,N),M=1,3),NKAENT(N),IKAPO(N)
C     NUMPOKA IST NUMMER DES POLYNOMKANALS,VERSCHIEDENE POLYN	C     NUMPOKA IST NUMMER DES POLYNOMKANALS,VERSCHIEDENE POLYN
C     MUESSEN DIREKT HINTEREINANDER STEHEN			C     MUESSEN DIREKT HINTEREINANDER STEHEN
C     NKAENT < 0, DISTORTIONSKANAELE				C     NKAENT < 0, DISTORTIONSKANAELE
      READ (INPUT,CHINT(IDUM)) KK, (NUMK(J),J=1,KK)		      READ (INPUT,CHINT(IDUM)) KK, (NUMK(J),J=1,KK)
      IF (KEIND.NE.0) READ (INPUT,CHINT(IDUM)) (MUMK(J),J=1,K	      IF (KEIND.NE.0) READ (INPUT,CHINT(IDUM)) (MUMK(J),J=1,K
      DO 191 J=1,KK						      DO 191 J=1,KK
      IF(NUMK(J).GT.NZBASV .OR. NUMK(J).EQ.0) THEN 		      IF(NUMK(J).GT.NZBASV .OR. NUMK(J).EQ.0) THEN 
        WRITE(NOUT,*)' IM KANAL ',				        WRITE(NOUT,*)' IM KANAL ',
     *  N,' IST DER INPUT FUER BV ',J,' FALSCH', NUMK(J)	     *  N,' IST DER INPUT FUER BV ',J,' FALSCH', NUMK(J)
        STOP 'FALSCHER BV'					        STOP 'FALSCHER BV'
        ENDIF							        ENDIF
      L = NUMK(J)						      L = NUMK(J)
      JKK(NUMK(J))= JKK(NUMK(J))+ 1				      JKK(NUMK(J))= JKK(NUMK(J))+ 1
      IF(JKK(NUMK(J)).GT.KKMAX) THEN				      IF(JKK(NUMK(J)).GT.KKMAX) THEN
	WRITE(NOUT,*) ' BASISVEKTOR ',NUMK(J),' TAUCHT IN MEH		WRITE(NOUT,*) ' BASISVEKTOR ',NUMK(J),' TAUCHT IN MEH
     *  KKMAX,' KANAELEN AUF, KANALNR ',N			     *  KKMAX,' KANAELEN AUF, KANALNR ',N
	STOP 191							STOP 191
	ENDIF								ENDIF
      KANUM(NUMK(J),JKK(NUMK(J)))= N				      KANUM(NUMK(J),JKK(NUMK(J)))= N
      KBVM=MAX(KBVM,NUMK(J))					      KBVM=MAX(KBVM,NUMK(J))
      IF (KEIND.EQ.0) GOTO 191					      IF (KEIND.EQ.0) GOTO 191
      MUM = MUMK(J)						      MUM = MUMK(J)
      UMK(L) = UNK(MUM)						      UMK(L) = UNK(MUM)
 191  NCOF(L,N) = 1						 191  NCOF(L,N) = 1
      I=0							      I=0
      DO 8 JH=1,NZBASV						      DO 8 JH=1,NZBASV
      J=NZBASV+1-JH						      J=NZBASV+1-JH
      N2= 2							      N2= 2
      UMKOF(N,J) = 0.						      UMKOF(N,J) = 0.
      IF(NCOF(J,N).EQ.0) GOTO 8					      IF(NCOF(J,N).EQ.0) GOTO 8
      UMKOF(N,J) = 1.						      UMKOF(N,J) = 1.
      IF(NKAENT(N).LT.0.AND.KEIND.LE.-2) GOTO 601		      IF(NKAENT(N).LT.0.AND.KEIND.LE.-2) GOTO 601
      CALL UMKOP(N,J,UMKOF(N,J))				      CALL UMKOP(N,J,UMKOF(N,J))
 601  IF(KEIND.EQ.0) GOTO 600					 601  IF(KEIND.EQ.0) GOTO 600
      UMKOF(N,J) = UMK(J) * UMKOF(N,J)				      UMKOF(N,J) = UMK(J) * UMKOF(N,J)
600   IF(I.GT.0) GOTO 11					600   IF(I.GT.0) GOTO 11
      I=1							      I=1
      N2= 1							      N2= 1
      MASSE(1,N)=MMASSE(1,J)					      MASSE(1,N)=MMASSE(1,J)
      MASSE(2,N)=MMASSE(2,J)					      MASSE(2,N)=MMASSE(2,J)
      REDM(N)=1./(1./DBLE(MASSE(1,N))+1./ DBLE(MASSE(2,N)))	      REDM(N)=1./(1./DBLE(MASSE(1,N))+1./ DBLE(MASSE(2,N)))
      MLAD(1,N)=MMLAD(1,J)					      MLAD(1,N)=MMLAD(1,J)
      MLAD(2,N)=MMLAD(2,J)					      MLAD(2,N)=MMLAD(2,J)
      E2K(N)=.5* DBLE(MLAD(1,N)*MLAD(2,N))*E2R0*REDM(N)/H2M	      E2K(N)=.5* DBLE(MLAD(1,N)*MLAD(2,N))*E2R0*REDM(N)/H2M
      DO 12 M=1,3						      DO 12 M=1,3
   12 MS(M,N)=MMS(M,J)						   12 MS(M,N)=MMS(M,J)
      DO 13 M=1,5						      DO 13 M=1,5
   13 LWERT(M,N)=MLWERT(M,J)					   13 LWERT(M,N)=MLWERT(M,J)
      MM=NZPAQ(J)						      MM=NZPAQ(J)
      NZP(N)=MM							      NZP(N)=MM
       DO 14 M=1,MM						       DO 14 M=1,MM
   14 PAR(M,N)=PAQ(M,J)						   14 PAR(M,N)=PAQ(M,J)
      KPK(N)=KPB(J)						      KPK(N)=KPB(J)
      GOTO 8							      GOTO 8
   11 IF(KEIND.LT.0) GOTO 15					   11 IF(KEIND.LT.0) GOTO 15
      IF(IABS(MASSE(1,N)-MMASSE(1,J))+IABS(MASSE(2,N)-MMASSE(	      IF(IABS(MASSE(1,N)-MMASSE(1,J))+IABS(MASSE(2,N)-MMASSE(
     *   IABS(MLAD(1,N)-MMLAD(1,J))+IABS(MLAD(2,N)-MMLAD(2,J)	     *   IABS(MLAD(1,N)-MMLAD(1,J))+IABS(MLAD(2,N)-MMLAD(2,J)
     *   GOTO 16						     *   GOTO 16
   15 IF(IABS(NZP(N)-NZPAQ(J)).NE.0) GOTO 16			   15 IF(IABS(NZP(N)-NZPAQ(J)).NE.0) GOTO 16
C      CHECK FUER BASIVECTOREN EINES KANALS			C      CHECK FUER BASIVECTOREN EINES KANALS
      IF(NKAENT(N).LT.0.AND.KEIND.LE.-2) GOTO 18		      IF(NKAENT(N).LT.0.AND.KEIND.LE.-2) GOTO 18
      IF(LWERT(4,N).NE.MLWERT(4,J)) GOTO 16			      IF(LWERT(4,N).NE.MLWERT(4,J)) GOTO 16
C     CHECK AUF GLEICHE RADIALDREHIMPULSE			C     CHECK AUF GLEICHE RADIALDREHIMPULSE
      IF(KPK(N).NE.KPB(J)) GOTO 16				      IF(KPK(N).NE.KPB(J)) GOTO 16
   18 A=0.							   18 A=0.
      DO 20 M=1,MM						      DO 20 M=1,MM
   20 A=A+ ABS(PAR(M,N)-PAQ(M,J))				   20 A=A+ ABS(PAR(M,N)-PAQ(M,J))
      IF(A.GT.1.E-6) GOTO 16					      IF(A.GT.1.E-6) GOTO 16
    8 CONTINUE							    8 CONTINUE
      READ(INPUT,1002) (LUM(M,N),M=1,MM)			      READ(INPUT,1002) (LUM(M,N),M=1,MM)
      J1=0							      J1=0
      DO 400  M=1,MM						      DO 400  M=1,MM
      IF(LUM(M,N).LE.0) GOTO 400				      IF(LUM(M,N).LE.0) GOTO 400
      J1=J1+1							      J1=J1+1
      LUM(M,N)=J1						      LUM(M,N)=J1
  400 CONTINUE							  400 CONTINUE
      LUM(MM+1,N)=J1						      LUM(MM+1,N)=J1
      DO 17 M=1,MM						      DO 17 M=1,MM
      NAR(M,N)=0						      NAR(M,N)=0
      M1=LUM(M,N)						      M1=LUM(M,N)
      IF(M1.LE.0) GOTO 17					      IF(M1.LE.0) GOTO 17
      PAR(M1,N) = PAR(M,N)*REDM(N)				      PAR(M1,N) = PAR(M,N)*REDM(N)
      NAR(M1,N)=KPK(N)						      NAR(M1,N)=KPK(N)
   17 CONTINUE							   17 CONTINUE
      MM = LUM(MM+1,N)						      MM = LUM(MM+1,N)
      KP2=KPK(N)*2						      KP2=KPK(N)*2
      IF(MREG(3).GT.0) GOTO 183					      IF(MREG(3).GT.0) GOTO 183
      MLAD(1,N) = 0						      MLAD(1,N) = 0
      MLAD(2,N) = 0						      MLAD(2,N) = 0
      E2K(N) = .0						      E2K(N) = .0
183   WRITE(NOUT,1007)  N,JWERT(3,N),LWERT(4,N),KP2,JWERT(1,N	183   WRITE(NOUT,1007)  N,JWERT(3,N),LWERT(4,N),KP2,JWERT(1,N
     1   JWERT(2,N),MASSE(1,N),MASSE(2,N),MLAD(1,N),MLAD(2,N)	     1   JWERT(2,N),MASSE(1,N),MASSE(2,N),MLAD(1,N),MLAD(2,N)
     2     (PAR(M,N),M=1,MM)					     2     (PAR(M,N),M=1,MM)
C       KANALDEFINITION						C       KANALDEFINITION
      J = 0							      J = 0
      DO 161 M=1,NZBASV						      DO 161 M=1,NZBASV
      IF (ABS(UMKOF(N,M)).LT.1.D-14) GOTO 161			      IF (ABS(UMKOF(N,M)).LT.1.D-14) GOTO 161
      J = J + 1							      J = J + 1
      NUMK(J) = M						      NUMK(J) = M
      UMK(J) = UMKOF(N,M)					      UMK(J) = UMKOF(N,M)
 161  CONTINUE							 161  CONTINUE
      WRITE (NOUT,1018) N,  (UMK(M),NUMK(M),M=1,J)		      WRITE (NOUT,1018) N,  (UMK(M),NUMK(M),M=1,J)
      MMM = NZP(N)						      MMM = NZP(N)
      WRITE(NOUT,1011)    (LUM(M,N),M=1,MMM)			      WRITE(NOUT,1011)    (LUM(M,N),M=1,MMM)
    7 NZP(N) = MM						    7 NZP(N) = MM
      NZKB=0							      NZKB=0
      DO 21 K=1,NZKA						      DO 21 K=1,NZKA
      IF(NKAENT(K).LT.0) GOTO 22				      IF(NKAENT(K).LT.0) GOTO 22
   21 NZKB=NZKB+1						   21 NZKB=NZKB+1
22    CALL DEFPOK(NZP,NZKA,1,NZKB,NZKPB)			22    CALL DEFPOK(NZP,NZKA,1,NZKB,NZKPB)
C       DEFINITION DER POLYNOMKANAELE				C       DEFINITION DER POLYNOMKANAELE
      IF(NZKA.LE.NZKB) GOTO 30					      IF(NZKA.LE.NZKB) GOTO 30
      DO 24 K=NZKB+1,NZKA					      DO 24 K=NZKB+1,NZKA
   24 NKAENT(K)=-1						   24 NKAENT(K)=-1
      GO TO 30							      GO TO 30
C     ENDE KANALDEFINITION STREURECHNUNG UND GEKOPPELTE BINDU	C     ENDE KANALDEFINITION STREURECHNUNG UND GEKOPPELTE BINDU
C								C
C								C
   4   CONTINUE							   4   CONTINUE
C     KANALDEFINTIONEN BINDUNGSRECHNUNG				C     KANALDEFINTIONEN BINDUNGSRECHNUNG
C								C
      NZKB=NZKA							      NZKB=NZKA
      DO 28 N=1,NZKA						      DO 28 N=1,NZKA
      DO 192 J=1,NZBASV						      DO 192 J=1,NZBASV
 192  NCOF(J,N) = 0						 192  NCOF(J,N) = 0
      READ (INPUT,CHINT(IDUM)) KK, (NUMK(J),J=1,KK)		      READ (INPUT,CHINT(IDUM)) KK, (NUMK(J),J=1,KK)
      IF (KEIND.NE.0) READ (INPUT,CHINT(IDUM)) (MUMK(J),J=1,K	      IF (KEIND.NE.0) READ (INPUT,CHINT(IDUM)) (MUMK(J),J=1,K
      DO 193 J=1,KK						      DO 193 J=1,KK
      IF(NUMK(J).GT.NZBASV .OR. NUMK(J).EQ.0) THEN 		      IF(NUMK(J).GT.NZBASV .OR. NUMK(J).EQ.0) THEN 
        WRITE(NOUT,*)' IM KANAL ',				        WRITE(NOUT,*)' IM KANAL ',
     *  N,' IST DER INPUT FUER BV ',J,' FALSCH', NUMK(J)	     *  N,' IST DER INPUT FUER BV ',J,' FALSCH', NUMK(J)
        STOP 'FALSCHER BV'					        STOP 'FALSCHER BV'
        ENDIF							        ENDIF
      L = NUMK(J)						      L = NUMK(J)
      JKK(NUMK(J))= JKK(NUMK(J))+ 1				      JKK(NUMK(J))= JKK(NUMK(J))+ 1
      IF(JKK(NUMK(J)).GT.KKMAX) THEN				      IF(JKK(NUMK(J)).GT.KKMAX) THEN
	WRITE(NOUT,*) ' BASISVEKTOR ',NUMK(J),' TAUCHT IN MEH		WRITE(NOUT,*) ' BASISVEKTOR ',NUMK(J),' TAUCHT IN MEH
     *  KKMAX,' KANAELEN AUF, KANALNR ',N			     *  KKMAX,' KANAELEN AUF, KANALNR ',N
	STOP 193							STOP 193
	ENDIF								ENDIF
      KANUM(NUMK(J),JKK(NUMK(J)))= N				      KANUM(NUMK(J),JKK(NUMK(J)))= N
      KBVM=MAX(KBVM,NUMK(J))					      KBVM=MAX(KBVM,NUMK(J))
      IF (KEIND.EQ.0) GOTO 193					      IF (KEIND.EQ.0) GOTO 193
      MUM = MUMK(J)						      MUM = MUMK(J)
      UMK(L) = UNK(MUM)						      UMK(L) = UNK(MUM)
 193  NCOF(L,N) = 1						 193  NCOF(L,N) = 1
      DO 27   M = 1,NZBASV					      DO 27   M = 1,NZBASV
      UMKOF(N,M) = NCOF(M,N)					      UMKOF(N,M) = NCOF(M,N)
      IF (KEIND*NCOF(M,N).EQ.0) GOTO 27				      IF (KEIND*NCOF(M,N).EQ.0) GOTO 27
      UMKOF(N,M) = UMK(M) * UMKOF(N,M)				      UMKOF(N,M) = UMK(M) * UMKOF(N,M)
   27 CONTINUE							   27 CONTINUE
      J = 0							      J = 0
      DO 25 M=1,NZBASV						      DO 25 M=1,NZBASV
      IF (ABS(UMKOF(N,M)).LT.1.D-12) GOTO 25			      IF (ABS(UMKOF(N,M)).LT.1.D-12) GOTO 25
      J = J + 1							      J = J + 1
      NUMK(J) = M						      NUMK(J) = M
      UMK(J) = UMKOF(N,M)					      UMK(J) = UMKOF(N,M)
  25  CONTINUE							  25  CONTINUE
      WRITE (NOUT,1018) N, (UMK(M),NUMK(M),M=1,J)		      WRITE (NOUT,1018) N, (UMK(M),NUMK(M),M=1,J)
      N2 = 3							      N2 = 3
      I=0							      I=0
      DO 84 J=1,NZBASV						      DO 84 J=1,NZBASV
      IF(NCOF(J,N).EQ.0) GOTO 84				      IF(NCOF(J,N).EQ.0) GOTO 84
       IF(I.GT.0) GOTO 87					       IF(I.GT.0) GOTO 87
      I=1							      I=1
      MASSE(1,N)=MMASSE(1,J)					      MASSE(1,N)=MMASSE(1,J)
      MASSE(2,N)=MMASSE(2,J)					      MASSE(2,N)=MMASSE(2,J)
      REDM(N)=1./(1./DBLE(MASSE(1,N))+1./ DBLE(MASSE(2,N)))	      REDM(N)=1./(1./DBLE(MASSE(1,N))+1./ DBLE(MASSE(2,N)))
      MS(3,N)=MMS(3,J)						      MS(3,N)=MMS(3,J)
      LWERT(5,N)=MLWERT(5,J)					      LWERT(5,N)=MLWERT(5,J)
      NZP(N)=NZPAQ(J)						      NZP(N)=NZPAQ(J)
      MM=NZP(N)							      MM=NZP(N)
      DO 702   M = 1,MM						      DO 702   M = 1,MM
      NAR(M,N)=KPB(J)						      NAR(M,N)=KPB(J)
  702 PAR(M,N) = PAQ(M,J)					  702 PAR(M,N) = PAQ(M,J)
      LWERT(4,N)=MLWERT(4,J)					      LWERT(4,N)=MLWERT(4,J)
      READ(INPUT,1002) (LUM(M,N),M=1,MM)			      READ(INPUT,1002) (LUM(M,N),M=1,MM)
      WRITE(NOUT,1011)    (LUM(M,N),M=1,MM)			      WRITE(NOUT,1011)    (LUM(M,N),M=1,MM)
      J1=0							      J1=0
      DO 410  M=1,MM						      DO 410  M=1,MM
      IF(LUM(M,N).LE.0) GOTO 410				      IF(LUM(M,N).LE.0) GOTO 410
      J1=J1+1							      J1=J1+1
      LUM(M,N)=J1						      LUM(M,N)=J1
  410 CONTINUE							  410 CONTINUE
      LUM(MM+1,N)=J1						      LUM(MM+1,N)=J1
      GO TO 84							      GO TO 84
   87 IF(NZP(N).NE.NZPAQ(J)) GOTO 16				   87 IF(NZP(N).NE.NZPAQ(J)) GOTO 16
      DO 713   M = 1,MM						      DO 713   M = 1,MM
      IF(ABS(PAR(M,N)-PAQ(M,J)).GT..00001) GOTO16		      IF(ABS(PAR(M,N)-PAQ(M,J)).GT..00001) GOTO16
  713 CONTINUE							  713 CONTINUE
      IF(KEIND.LT.0) GOTO 84					      IF(KEIND.LT.0) GOTO 84
      IF(MS(3,N).NE.MMS(3,J)) GOTO 16				      IF(MS(3,N).NE.MMS(3,J)) GOTO 16
      IF(LWERT(5,N).NE.MLWERT(5,J)) GOTO 16			      IF(LWERT(5,N).NE.MLWERT(5,J)) GOTO 16
      IF(IABS(MASSE(1,N)-MMASSE(1,J))+IABS(MASSE(2,N)-MMASSE(	      IF(IABS(MASSE(1,N)-MMASSE(1,J))+IABS(MASSE(2,N)-MMASSE(
     &.NE.0) GOTO 16						     &.NE.0) GOTO 16
      IF(LWERT(4,N).NE.MLWERT(4,J)) GOTO 16			      IF(LWERT(4,N).NE.MLWERT(4,J)) GOTO 16
   84 CONTINUE							   84 CONTINUE
      NZP(N)=LUM(MM+1,N)					      NZP(N)=LUM(MM+1,N)
  28  CONTINUE							  28  CONTINUE
      CALL DEFPOK(NZP,NZKA,0,NZKB,NZKPB)			      CALL DEFPOK(NZP,NZKA,0,NZKB,NZKPB)
C     ENDE KANALDEFINITION BINDUNGSRECHNUNG			C     ENDE KANALDEFINITION BINDUNGSRECHNUNG
C								C
C								C
30    CONTINUE							30    CONTINUE
C     FUER SMIN FOLGEND STATEMENTS BESEITIGEN			C     FUER SMIN FOLGEND STATEMENTS BESEITIGEN
      CLOSE(UNIT=NOUT,STATUS='KEEP')				      CLOSE(UNIT=NOUT,STATUS='KEEP')
      OPEN(UNIT=NOUT,FILE='OUTPUT',ACCESS='APPEND')		      OPEN(UNIT=NOUT,FILE='OUTPUT',ACCESS='APPEND')
C     STREU UND BINDUNGSRECHNUNG				C     STREU UND BINDUNGSRECHNUNG
C								C
      NZBV=0							      NZBV=0
      DO 32 IQ=1,NZF						      DO 32 IQ=1,NZF
      NZBV=NZBV + NZRHO(IQ)					      NZBV=NZBV + NZRHO(IQ)
      IF(KBVM.LE.NZBV) GOTO 33					      IF(KBVM.LE.NZBV) GOTO 33
32    CONTINUE							32    CONTINUE
33    MAZF=MIN(IQ,NZF)						33    MAZF=MIN(IQ,NZF)
C								C
      NZQ(1)=0							      NZQ(1)=0
      K2 = 0							      K2 = 0
      NZPWM=0							      NZPWM=0
      DO 31 K=1,NZKA						      DO 31 K=1,NZKA
      NZQ(K+1)=NZQ(K)+NZP(K)					      NZQ(K+1)=NZQ(K)+NZP(K)
      NZPWM=MAX0(NZPWM,NZP(K))					      NZPWM=MAX0(NZPWM,NZP(K))
   31 CONTINUE							   31 CONTINUE
      MM = NZQ(NZKA+1)						      MM = NZQ(NZKA+1)
      IF(MM.GT.NDIMD) GOTO 905					      IF(MM.GT.NDIMD) GOTO 905
C								C
      DO 29   M = 1,MM						      DO 29   M = 1,MM
      DO 29   L = 1,NZOPER+2					      DO 29   L = 1,NZOPER+2
   29 OPWERT(L,M) = .0						   29 OPWERT(L,M) = .0
C								C
      MMM=NZQ(NZKA+1)						      MMM=NZQ(NZKA+1)
      DO 237 JKL=1,2						      DO 237 JKL=1,2
      DO 237 IKL=1,2						      DO 237 IKL=1,2
      DO 237 N=1,MMM						      DO 237 N=1,MMM
      DO 237 M=1,MMM						      DO 237 M=1,MMM
237    DM(M,N,IKL,JKL)= 0.					237    DM(M,N,IKL,JKL)= 0.
C								C
      ILAUF=2							      ILAUF=2
      IF (NENTP.EQ.0) ILAUF=1					      IF (NENTP.EQ.0) ILAUF=1
C								C
      DO 950, MEMPT=1, ILAUF					      DO 950, MEMPT=1, ILAUF
C     1. DURCHLAUF: BERECHNUNG VON NORM- UND HAMILTONMATRIX,	C     1. DURCHLAUF: BERECHNUNG VON NORM- UND HAMILTONMATRIX,
C                   DIAGONALISATION UND BESTIMMUNG DER EIGENV	C                   DIAGONALISATION UND BESTIMMUNG DER EIGENV
C     2. DURCHLAUF: NUR FUER BINDUNGSRECHNUNG; BESTIMMUNG DER	C     2. DURCHLAUF: NUR FUER BINDUNGSRECHNUNG; BESTIMMUNG DER
C                   BEITRAEGE DER OPERATOREN FUER DIE ERSTEN  |	C                   BEITRAEGE DER OPERATOREN FUER DIE ERSTEN 
C								C
C								C
      IIKUNT=2							      IIKUNT=2
      IF(NENTP.EQ.2) IIKUNT=1					      IF(NENTP.EQ.2) IIKUNT=1
      IF (MEMPT.EQ.1) IIKUNT=NZOP				      IF (MEMPT.EQ.1) IIKUNT=NZOP
C								C
      DO 850, IIK=IIKUNT, NZOP					      DO 850, IIK=IIKUNT, NZOP
C								C
      ISTART=2							      ISTART=2
      IF (MEMPT.EQ.1.OR.(IIK.EQ.IIKUNT .AND. IIK.NE.NZOP)) IS	      IF (MEMPT.EQ.1.OR.(IIK.EQ.IIKUNT .AND. IIK.NE.NZOP)) IS
C								C
      IF(IZWEI.EQ.1) THEN					      IF(IZWEI.EQ.1) THEN
C								C
         REWIND 10						         REWIND 10
         READ (10)						         READ (10)
         DO 36, IH=1, NZBASV2					         DO 36, IH=1, NZBASV2
36       READ (10)						36       READ (10)
      ENDIF							      ENDIF
C								C
      IF(IDREI.EQ.1) THEN					      IF(IDREI.EQ.1) THEN
C								C
         REWIND 11						         REWIND 11
         READ (11)						         READ (11)
         DO 361 IH=1, NZBASV3					         DO 361 IH=1, NZBASV3
361      READ (11)						361      READ (11)
      ENDIF							      ENDIF
C								C
       IF(MEMPT.EQ.1)GOTO 350					       IF(MEMPT.EQ.1)GOTO 350
      DO 37 N=1,MMM						      DO 37 N=1,MMM
      DO 37 M=1,MMM						      DO 37 M=1,MMM
37    DM(M,N,2,2)= 0.						37    DM(M,N,2,2)= 0.
       IF(IIK.GT.1)GOTO 350					       IF(IIK.GT.1)GOTO 350
      DO 337 N=1,MMM						      DO 337 N=1,MMM
      DO 337 M=1,MMM						      DO 337 M=1,MMM
337    DM(M,N,2,1)= 0.						337    DM(M,N,2,1)= 0.
350   CONTINUE							350   CONTINUE
C								C
         MKCU=1							         MKCU=1
      MKCO=NZOP							      MKCO=NZOP
      IF(IZWEI.EQ.0)MKCU=15					      IF(IZWEI.EQ.0)MKCU=15
      IF(IDREI.EQ.0)MKCO=14					      IF(IDREI.EQ.0)MKCO=14
      IF (MEMPT.GT.1) THEN					      IF (MEMPT.GT.1) THEN
      MKCU=IIK							      MKCU=IIK
      MKCO=IIK							      MKCO=IIK
      ENDIF							      ENDIF
C								C
470   CONTINUE							470   CONTINUE
C								C
C								C
      DO 140 MFL=1,MAZF						      DO 140 MFL=1,MAZF
      DO 139 MFR=1,MFL						      DO 139 MFR=1,MFL
C     LOOP ZERLEGUNGEN RECHTS					C     LOOP ZERLEGUNGEN RECHTS
C								C
      MLES=NZRHO(MFL)*NZRHO(MFR)				      MLES=NZRHO(MFL)*NZRHO(MFR)
      IF (MFR.EQ.MFL) MLES=(NZRHO(MFL)*(NZRHO(MFL)+1))/2	      IF (MFR.EQ.MFL) MLES=(NZRHO(MFL)*(NZRHO(MFL)+1))/2
      IF(MLES.LE.0) GOTO 139					      IF(MLES.LE.0) GOTO 139
C								C
C								C
      NBAND1=10							      NBAND1=10
      DO 41, MKC=1,NZOP						      DO 41, MKC=1,NZOP
      KPUTZ=2							      KPUTZ=2
      IF(MKC.EQ.1 .OR. MKC.EQ.15) KPUTZ=1			      IF(MKC.EQ.1 .OR. MKC.EQ.15) KPUTZ=1
C     LOOP OPERATOREN						C     LOOP OPERATOREN
      IF(MKC.GT.14) NBAND1=11					      IF(MKC.GT.14) NBAND1=11
C								C
      IF(LREG(MKC).LE.0) GOTO 41				      IF(LREG(MKC).LE.0) GOTO 41
      IF (MKC.GE.MKCU.AND.MKC.LE.MKCO) GOTO 430			      IF (MKC.GE.MKCU.AND.MKC.LE.MKCO) GOTO 430
      DO 390, NLES=1, MLES					      DO 390, NLES=1, MLES
       READ (NBAND1)						       READ (NBAND1)
390   CONTINUE							390   CONTINUE
      GOTO 41							      GOTO 41
C								C
430   CONTINUE							430   CONTINUE
      DO 40 NLES=1,MLES						      DO 40 NLES=1,MLES
        READ(NBAND1)   NUML,NUMR,IK1,JK1,(((DN(K,L,I),K=1,IK1	        READ(NBAND1)   NUML,NUMR,IK1,JK1,(((DN(K,L,I),K=1,IK1
     1 I=1,2)							     1 I=1,2)
      IF(IGAK.LT.2.OR.MEMPT.GT.1) GOTO 221			      IF(IGAK.LT.2.OR.MEMPT.GT.1) GOTO 221
      WRITE(NOUT,219) MKC,NUML,NUMR,IK1,JK1			      WRITE(NOUT,219) MKC,NUML,NUMR,IK1,JK1
219   FORMAT(' MKC,NUML,NUMR,IK1,JK1 ',5I3)			219   FORMAT(' MKC,NUML,NUMR,IK1,JK1 ',5I3)
      IF(IGAK.LT.3) GOTO 221					      IF(IGAK.LT.3) GOTO 221
      WRITE(NOUT,220)(((DN(K,L,I),K=1,IK1),L=1,JK1),I=1,2)	      WRITE(NOUT,220)(((DN(K,L,I),K=1,IK1),L=1,JK1),I=1,2)
220   FORMAT(1X,10E12.4)					220   FORMAT(1X,10E12.4)
221   CONTINUE							221   CONTINUE
C								C
C								C
      IF(MREG(MKC).EQ.0) GOTO 40				      IF(MREG(MKC).EQ.0) GOTO 40
      IF(IK1*JK1.EQ.1 .AND.DN(1,1,2).EQ.0. .AND.DN(1,1,1).EQ.	      IF(IK1*JK1.EQ.1 .AND.DN(1,1,2).EQ.0. .AND.DN(1,1,1).EQ.
      LBL=MLWERT(5,NUML)					      LBL=MLWERT(5,NUML)
      LBR=MLWERT(5,NUMR)					      LBR=MLWERT(5,NUMR)
      ML=MMS(3,NUML)						      ML=MMS(3,NUML)
      MR=MMS(3,NUMR)						      MR=MMS(3,NUMR)
      KAK=0							      KAK=0
C OPERATOR                1  2  3  4  5  6  7  8  9  10		C OPERATOR                1  2  3  4  5  6  7  8  9  10
      IF(NZOP.LE.23) GOTO(96,96,96,96,96,96,96,92,92,93,	      IF(NZOP.LE.23) GOTO(96,96,96,96,96,96,96,92,92,93,
     *                    93,96,93,96,96,96,96,93,93,96,	     *                    93,96,93,96,96,96,96,93,93,96,
     *                    92,93,94),MKC				     *                    92,93,94),MKC
      IF(NZOP.EQ.29) GOTO(96,96,96,96,96,96,96,92,92,93,	      IF(NZOP.EQ.29) GOTO(96,96,96,96,96,96,96,92,92,93,
     *                    93,96,93,96,96,96,96,96,93,93,	     *                    93,96,93,96,96,96,96,96,93,93,
     *                    93,93,96,96,92,92,93,93,94),MKC	     *                    93,93,96,96,92,92,93,93,94),MKC
      IF(NZOP.EQ.31) GOTO(96,96,96,96,96,96,96,92,92,93,	      IF(NZOP.EQ.31) GOTO(96,96,96,96,96,96,96,92,92,93,
     *                    93,96,93,96,96,96,96,96,93,93,	     *                    93,96,93,96,96,96,96,96,93,93,
     *                    93,93,96,96,92,92,93,93,94,96,	     *                    93,93,96,96,92,92,93,93,94,96,
     *                    93),MKC				     *                    93),MKC
   92 KAK=2							   92 KAK=2
      GO TO 96							      GO TO 96
   93 KAK=4							   93 KAK=4
      GO TO 96							      GO TO 96
   94 KAK=6							   94 KAK=6
   96 F=(-1)**((2*LBR+2*MR-ML+JWS)/2)* POTFAK(MKC)		   96 F=(-1)**((2*LBR+2*MR-ML+JWS)/2)* POTFAK(MKC)
C       LB-R/L = total orbital angular momenta		      <
C       M-R/L  = 2 * total Spin				      <
C       SP-R/L =     total Spin				      <
C       2(SR+1)  <SL||id||SR> = 1/Sqrt[2S+1]   		      <
      FK=F6J(2*LBR,MR,JWS,ML,2*LBL,KAK)				      FK=F6J(2*LBR,MR,JWS,ML,2*LBL,KAK)
      F=F*FK							      F=F*FK
      IF(F.EQ.0.) GOTO 40					      IF(F.EQ.0.) GOTO 40
      DO 42 JKAL=1,JKK(NUML)					      DO 42 JKAL=1,JKK(NUML)
      DO 142 JKAR=1,JKK(NUMR)					      DO 142 JKAR=1,JKK(NUMR)
      KWIED=0							      KWIED=0
      IF(KANUM(NUML,JKAL).EQ.KANUM(NUMR,JKAL) .AND.		      IF(KANUM(NUML,JKAL).EQ.KANUM(NUMR,JKAL) .AND.
     *          KANUM(NUML,JKAR).EQ.KANUM(NUMR,JKAR)) KWIED=1	     *          KANUM(NUML,JKAR).EQ.KANUM(NUMR,JKAR)) KWIED=1
      KANL= KANUM(NUML,JKAL)					      KANL= KANUM(NUML,JKAL)
      KANR= KANUM(NUMR,JKAR)					      KANR= KANUM(NUMR,JKAR)
99    FAK1 = UMKOF(KANL,NUML)*UMKOF(KANR,NUMR)			99    FAK1 = UMKOF(KANL,NUML)*UMKOF(KANR,NUMR)
      FAK2 = UMKOF(KANL,NUMR)*UMKOF(KANR,NUML)			      FAK2 = UMKOF(KANL,NUMR)*UMKOF(KANR,NUML)
       IF (ABS(FAK1)+ABS(FAK2).LT.1.D-16) GOTO 142		       IF (ABS(FAK1)+ABS(FAK2).LT.1.D-16) GOTO 142
      IF(NUML.EQ.NUMR) THEN					      IF(NUML.EQ.NUMR) THEN
	FAK2=0.								FAK2=0.
	KWIED=1								KWIED=1
      ENDIF							      ENDIF
      IF(KANL.EQ.KANR) KWIED=1					      IF(KANL.EQ.KANR) KWIED=1
      F1=FAK1*F							      F1=FAK1*F
      F2=FAK2*F							      F2=FAK2*F
      DO 46 K=1,IK1						      DO 46 K=1,IK1
      DO 146 L=1,JK1						      DO 146 L=1,JK1
      K1=LUM(K,KANL)						      K1=LUM(K,KANL)
      L1=LUM(L,KANR)						      L1=LUM(L,KANR)
      K2=LUM(K,KANR)						      K2=LUM(K,KANR)
      L2=LUM(L,KANL)						      L2=LUM(L,KANL)
      KK=NZQ(KANL)+K1						      KK=NZQ(KANL)+K1
      LL=NZQ(KANR)+L1						      LL=NZQ(KANR)+L1
      LK=NZQ(KANR)+K2						      LK=NZQ(KANR)+K2
      KL=NZQ(KANL)+L2						      KL=NZQ(KANL)+L2
C								C
C								C
      IF(K1*L1.LE.0) GOTO 420					      IF(K1*L1.LE.0) GOTO 420
C   DN(.,.,1) ENTHAELT NUR TERME MIT AUSTAUSCH ODER WW UEBER 	C   DN(.,.,1) ENTHAELT NUR TERME MIT AUSTAUSCH ODER WW UEBER 
C    DN(.,.,2) ENTHAELT ALLE TERME				C    DN(.,.,2) ENTHAELT ALLE TERME
      DM (KK,LL,1,KPUTZ) = DM (KK,LL,1,KPUTZ) + DN(K,L,1) * F	      DM (KK,LL,1,KPUTZ) = DM (KK,LL,1,KPUTZ) + DN(K,L,1) * F
      DM(KK,LL,2,KPUTZ) = DM(KK,LL,2,KPUTZ) + DN(K,L,2) * F1	      DM(KK,LL,2,KPUTZ) = DM(KK,LL,2,KPUTZ) + DN(K,L,2) * F1
 420   IF(K2*L2.LE.0) GOTO 45					 420   IF(K2*L2.LE.0) GOTO 45
      DM (KL,LK,1,KPUTZ) = DM (KL,LK,1,KPUTZ) + DN(K,L,1) * F	      DM (KL,LK,1,KPUTZ) = DM (KL,LK,1,KPUTZ) + DN(K,L,1) * F
      DM(KL,LK,2,KPUTZ) = DM(KL,LK,2,KPUTZ) + DN(K,L,2) * F2	      DM(KL,LK,2,KPUTZ) = DM(KL,LK,2,KPUTZ) + DN(K,L,2) * F2
45    IF(MEMPT.GT.1) GOTO 50					45    IF(MEMPT.GT.1) GOTO 50
      IF(IABS(KANL-KANR)+IABS(K-L).NE.0) GOTO 50		      IF(IABS(KANL-KANR)+IABS(K-L).NE.0) GOTO 50
      IF(K1.LE.0) GOTO 50					      IF(K1.LE.0) GOTO 50
      OPWERT(MKC,KK )=OPWERT(MKC,KK ) + (F1+F2)*DN(K,K,2)	      OPWERT(MKC,KK )=OPWERT(MKC,KK ) + (F1+F2)*DN(K,K,2)
      IF(MKC.NE.1 .AND. MKC.NE.15) GOTO 49			      IF(MKC.NE.1 .AND. MKC.NE.15) GOTO 49
      OPWERT(NZOPER+1,KK) =					      OPWERT(NZOPER+1,KK) =
     *   OPWERT(NZOPER+1,KK) + (F1+F2)*(DN(K,K,2)-DN(K,K,1))	     *   OPWERT(NZOPER+1,KK) + (F1+F2)*(DN(K,K,2)-DN(K,K,1))
      GO TO 50							      GO TO 50
   49 OPWERT(NZOPER+2,KK) =					   49 OPWERT(NZOPER+2,KK) =
     *   OPWERT(NZOPER+2,KK) + (F1+F2)*(DN(K,K,2)-DN(K,K,1))	     *   OPWERT(NZOPER+2,KK) + (F1+F2)*(DN(K,K,2)-DN(K,K,1))
   50 CONTINUE							   50 CONTINUE
146   CONTINUE							146   CONTINUE
C     LOOP PARAMETER RECHTS					C     LOOP PARAMETER RECHTS
   46 CONTINUE							   46 CONTINUE
C     LOOP PARAMETER LINKS					C     LOOP PARAMETER LINKS
      IF(KWIED.EQ.1) GOTO 142					      IF(KWIED.EQ.1) GOTO 142
      KWIED=1							      KWIED=1
      JUM=KANR							      JUM=KANR
      KANR=KANL							      KANR=KANL
      KANL=JUM							      KANL=JUM
      GOTO 99							      GOTO 99
C     RUECKSPRUNG UM SYMMETRISCHE MATRIX GANZ AUFZUBAUEN	C     RUECKSPRUNG UM SYMMETRISCHE MATRIX GANZ AUFZUBAUEN
142   CONTINUE							142   CONTINUE
C     LOOP KANAELE RECHTS					C     LOOP KANAELE RECHTS
   42 CONTINUE							   42 CONTINUE
C     LOOP KANAELE LINKS					C     LOOP KANAELE LINKS
   40 CONTINUE							   40 CONTINUE
C     LOOP MATRIZEN						C     LOOP MATRIZEN
C								C
C     ENDE LOOP OPERATOREN					C     ENDE LOOP OPERATOREN
   41 CONTINUE							   41 CONTINUE
C								C
C     ENDE LOOP ZERLEGUNGEN RECHTS				C     ENDE LOOP ZERLEGUNGEN RECHTS
139   CONTINUE							139   CONTINUE
C								C
C     ENDE LOOP ZERLEGUNGEN LINKS				C     ENDE LOOP ZERLEGUNGEN LINKS
  140 CONTINUE							  140 CONTINUE
C								C
      IF( MEMPT.GT.1) GOTO 141					      IF( MEMPT.GT.1) GOTO 141
C     WIRD NUR EINMAL DURCHLAUFEN 				C     WIRD NUR EINMAL DURCHLAUFEN 
      KONTRO=0							      KONTRO=0
      DO 1400 K=1,NZKAPO					      DO 1400 K=1,NZKAPO
      DO 1400 M=1, IZP(K)					      DO 1400 M=1, IZP(K)
      KK = IZQ(K) + M						      KK = IZQ(K) + M
C     CHECK NORM GT 0						C     CHECK NORM GT 0
      IF (OPWERT(MKCU,KK).GT.1.D-10) GOTO 1400			      IF (OPWERT(MKCU,KK).GT.1.D-10) GOTO 1400
      WRITE (NOUT,1401) K, M, KK,NZKAPO,		      |	      WRITE (NOUT,1401) K, M, KK, OPWERT(NZOPER+1,KK),OPWERT(
     *  OPWERT(NZOPER+1,KK),OPWERT(MKCU,KK)		      |	 1401 FORMAT (14H EINGABEFEHLER ,3I3, 2E12.4)
 1401 FORMAT (14H EINGABEFEHLER ,4I3, 2E12.4)		      <
      KONTRO=1							      KONTRO=1
 1400 CONTINUE							 1400 CONTINUE
      IF (KONTRO.EQ.1) STOP 50					      IF (KONTRO.EQ.1) STOP 50
C								C
141   IF(KAUSD.LT.1) GOTO 51					141   IF(KAUSD.LT.1) GOTO 51
      IF(ILAUF.EQ.2.AND.MREG(IIK).EQ.0) GOTO 51			      IF(ILAUF.EQ.2.AND.MREG(IIK).EQ.0) GOTO 51
      WRITE(NOUT,151) IEINS,IIK					      WRITE(NOUT,151) IEINS,IIK
151   FORMAT(I5,' -TE MATRIX EN,H IN ENPON,OPERATOR',I5)	151   FORMAT(I5,' -TE MATRIX EN,H IN ENPON,OPERATOR',I5)
      CALL SCHEMA(DM(1,1,2,IEINS),MMM,MMM,NDIMD,10)		      CALL SCHEMA(DM(1,1,2,IEINS),MMM,MMM,NDIMD,10)
      WRITE(NOUT,151) IEINS+1,IIK				      WRITE(NOUT,151) IEINS+1,IIK
      CALL SCHEMA(DM(1,1,2,IEINS+1),MMM,MMM,NDIMD,10)		      CALL SCHEMA(DM(1,1,2,IEINS+1),MMM,MMM,NDIMD,10)
C     IF(ILAUF.EQ.1.OR.MREG(IIK).NE.0)				C     IF(ILAUF.EQ.1.OR.MREG(IIK).NE.0)
C    *       CALL SCHEMA(DM(1,1,2,KPUTZ),MMM,MMM,NDIMD,10)	C    *       CALL SCHEMA(DM(1,1,2,KPUTZ),MMM,MMM,NDIMD,10)
51    CONTINUE							51    CONTINUE
C								C
      IF(ICOPMA.GT.0 .AND. MEMPT.EQ.1 ) THEN			      IF(ICOPMA.GT.0 .AND. MEMPT.EQ.1 ) THEN
      OPEN(UNIT=19,FILE='MATOUT',STATUS='UNKNOWN',FORM='FORMA	      OPEN(UNIT=19,FILE='MATOUT',STATUS='UNKNOWN',FORM='FORMA
      WRITE(MATOU,'(G20.8E3)')				      |	      WRITE(MATOU,'(G12.5)')
     *  MMM,(((DM(N,M,2,JK1),N=1,MMM),M=1,MMM),JK1=1,2)		     *  MMM,(((DM(N,M,2,JK1),N=1,MMM),M=1,MMM),JK1=1,2)
      ENDIF							      ENDIF
C								C
      IF (ISTART.GT.1.AND.MEMPT.EQ.1) GOTO 500			      IF (ISTART.GT.1.AND.MEMPT.EQ.1) GOTO 500
      CALL UMNORM (NENTP,NBAND9,MEMPT,ISTART,IPLO)		      CALL UMNORM (NENTP,NBAND9,MEMPT,ISTART,IPLO)
C								C
      IF(KAUSD.LT.3) GOTO 500					      IF(KAUSD.LT.3) GOTO 500
      IF(ILAUF.EQ.2.AND.MREG(IIK).EQ.0) GOTO 500		      IF(ILAUF.EQ.2.AND.MREG(IIK).EQ.0) GOTO 500
      WRITE(NOUT,1015) ISTART, MEMPT,IIK			      WRITE(NOUT,1015) ISTART, MEMPT,IIK
1015  FORMAT(/,I4,'-TE MATRIX IN ENDMAT NACH UMNORM IM',I2,	1015  FORMAT(/,I4,'-TE MATRIX IN ENDMAT NACH UMNORM IM',I2,
     *       '-TEN UMLAUF,OPERATOR',I5)				     *       '-TEN UMLAUF,OPERATOR',I5)
      CALL SCHEMA(DM(1,1,2,ISTART),MMM,MMM,NDIMD,10)		      CALL SCHEMA(DM(1,1,2,ISTART),MMM,MMM,NDIMD,10)
      IF(ILAUF.EQ.1.OR.MREG(IIK).NE.0)				      IF(ILAUF.EQ.1.OR.MREG(IIK).NE.0)
     *        CALL SCHEMA(DM(1,1,2,ISTART),MMM,MMM,NDIMD,10)	     *        CALL SCHEMA(DM(1,1,2,ISTART),MMM,MMM,NDIMD,10)
C								C
C     ENDE LOOP KPUTZ						C     ENDE LOOP KPUTZ
500   CONTINUE							500   CONTINUE
C								C
C								C
      IF (MEMPT.EQ.1) GOTO 750					      IF (MEMPT.EQ.1) GOTO 750
C     DER FOLGENDE TEIL DIENT DER ENTWICKLUNG DER ENERGIEN DE	C     DER FOLGENDE TEIL DIENT DER ENTWICKLUNG DER ENERGIEN DE
C     OPERATOREN FUER DIE BASISVEKTOREN (NUR BEI BINDUNGSLAUF	C     OPERATOREN FUER DIE BASISVEKTOREN (NUR BEI BINDUNGSLAUF
C								C
      IF(NEIGIN.EQ.0) GOTO 1310					      IF(NEIGIN.EQ.0) GOTO 1310
C     HIER WERDEN DIE EIGENVEKTOREN EINGELESEN			C     HIER WERDEN DIE EIGENVEKTOREN EINGELESEN
      DO 1308 N=1,NZZ						      DO 1308 N=1,NZZ
      DO 1300 L=1,MMM 						      DO 1300 L=1,MMM 
1300  READ(INPUT,602) QQ(L,N)					1300  READ(INPUT,602) QQ(L,N)
1308  CONTINUE							1308  CONTINUE
C     EINLESEN BEENDET						C     EINLESEN BEENDET
1309  FORMAT(' VEKTOR EINGELESEN')				1309  FORMAT(' VEKTOR EINGELESEN')
      WRITE(NOUT,1309)						      WRITE(NOUT,1309)
        IF(IPLO.GT.0) CALL PLOB(EOV,IPLO,NB15,NENTP)		        IF(IPLO.GT.0) CALL PLOB(EOV,IPLO,NB15,NENTP)
      NEIGIN=0							      NEIGIN=0
1310  CONTINUE							1310  CONTINUE
C								C
      DO 610 K=1,NZZ						      DO 610 K=1,NZZ
      DO 610 L=1,NZZ						      DO 610 L=1,NZZ
      OBWERT(1,K,L)=.0						      OBWERT(1,K,L)=.0
      OBWERT(IIK,K,L)=.0					      OBWERT(IIK,K,L)=.0
      DO 590, M=1,MMM						      DO 590, M=1,MMM
      DO 590, N=1,MMM						      DO 590, N=1,MMM
      OBWERT(1,K,L)=OBWERT(1,K,L)+QQ(M,K)*QQ(N,L)*DM(M,N,2,1)	      OBWERT(1,K,L)=OBWERT(1,K,L)+QQ(M,K)*QQ(N,L)*DM(M,N,2,1)
      OBWERT(IIK,K,L)=OBWERT(IIK,K,L)+QQ(M,K)*QQ(N,L)*DM(M,N,	      OBWERT(IIK,K,L)=OBWERT(IIK,K,L)+QQ(M,K)*QQ(N,L)*DM(M,N,
590   CONTINUE							590   CONTINUE
610   CONTINUE							610   CONTINUE
C     ALLE ENERGIEN GERECHNET					C     ALLE ENERGIEN GERECHNET
C     AUSDRUCK DER KOPPLUNGSMATRIXELEMENTE			C     AUSDRUCK DER KOPPLUNGSMATRIXELEMENTE
      IF(KAUSD.LT.0) GOTO 630					      IF(KAUSD.LT.0) GOTO 630
      IF(MREG(IIK).EQ.0) GOTO 630				      IF(MREG(IIK).EQ.0) GOTO 630
      WRITE(NOUT,1019) IIK					      WRITE(NOUT,1019) IIK
      DO 620 K=1,NZZ						      DO 620 K=1,NZZ
620   WRITE(NOUT,1020) (OBWERT(IIK,K,L),L=1,NZZ)		620   WRITE(NOUT,1020) (OBWERT(IIK,K,L),L=1,NZZ)
      IF(IIK.NE.2) GOTO 630					      IF(IIK.NE.2) GOTO 630
      WRITE(NOUT,*) ' NORMMATRIX'				      WRITE(NOUT,*) ' NORMMATRIX'
      DO 621 K=1,NZZ						      DO 621 K=1,NZZ
621   WRITE(NOUT,1020) (OBWERT(1,K,L),L=1,NZZ)			621   WRITE(NOUT,1020) (OBWERT(1,K,L),L=1,NZZ)
1019  FORMAT(' KOPPLUNGSMATRIX FUER OPERATOR',I5)		1019  FORMAT(' KOPPLUNGSMATRIX FUER OPERATOR',I5)
1020  FORMAT(1X,10G12.5)					1020  FORMAT(1X,10G12.5)
630   CONTINUE							630   CONTINUE
      IF (MEMPT.GT.1) GOTO 850					      IF (MEMPT.GT.1) GOTO 850
C								C
C								C
750   CONTINUE							750   CONTINUE
C     WIRD NUR EINMAL DURCHLAUFEN (FUER MEMPT=1)		C     WIRD NUR EINMAL DURCHLAUFEN (FUER MEMPT=1)
       IF(IDRU.LT.1) GOTO 1168					       IF(IDRU.LT.1) GOTO 1168
      DO 1100 K=1,NZKAPO					      DO 1100 K=1,NZKAPO
       KANF=IZQ(K)+1						       KANF=IZQ(K)+1
       KEND=IZQ(K)+NZP(K)					       KEND=IZQ(K)+NZP(K)
       WRITE(NOUT,165) (OPWERT(NZOPER+1,KK),KK=KANF,KEND)	       WRITE(NOUT,165) (OPWERT(NZOPER+1,KK),KK=KANF,KEND)
165   FORMAT(' OPW ',10E12.5)					165   FORMAT(' OPW ',10E12.5)
       WRITE(NOUT,165) (OPWERT(NZOPER+2,KK),KK=KANF,KEND)	       WRITE(NOUT,165) (OPWERT(NZOPER+2,KK),KK=KANF,KEND)
 1100 CONTINUE							 1100 CONTINUE
C								C
1168  IF (NENTP.EQ.1) GOTO 800					1168  IF (NENTP.EQ.1) GOTO 800
C     STREURECHNUNG ODER BINDUNGSRECHNUNG MIT KOPPLUNG, NENTP	C     STREURECHNUNG ODER BINDUNGSRECHNUNG MIT KOPPLUNG, NENTP
      CALL CHEPOK(IDRU,MREG,NZOP)				      CALL CHEPOK(IDRU,MREG,NZOP)
C     SCHIEBEN DER SCHWELLEN					C     SCHIEBEN DER SCHWELLEN
      IF(IABLK.EQ.0) GOTO 1203					      IF(IABLK.EQ.0) GOTO 1203
      READ(INPUT,1002) (NKANB(IH),IH=1,IABLK)			      READ(INPUT,1002) (NKANB(IH),IH=1,IABLK)
      READ(INPUT,1113) (ES(IH),IH=1,IABLK)			      READ(INPUT,1113) (ES(IH),IH=1,IABLK)
      N1=1							      N1=1
      DO 1202 IH=1,IABLK					      DO 1202 IH=1,IABLK
      DO 1201 NH=N1,NKANB(IH)					      DO 1201 NH=N1,NKANB(IH)
1201  EBIN(NH)=EBIN(NH)+ES(IH)					1201  EBIN(NH)=EBIN(NH)+ES(IH)
1202  N1=NKANB(IH)+1						1202  N1=NKANB(IH)+1
1055  FORMAT(' GESCHOBENE BINDUNGSENERGIEN ',/,(12F10.4))	1055  FORMAT(' GESCHOBENE BINDUNGSENERGIEN ',/,(12F10.4))
       WRITE(NOUT,1055)(EBIN(K),K=1,NZKAPO)			       WRITE(NOUT,1055)(EBIN(K),K=1,NZKAPO)
1203  CONTINUE							1203  CONTINUE
C     SCHIEBUNG GETAN						C     SCHIEBUNG GETAN
C     SCHREIBEN AUF TAPE ZUR WEITERGABE				C     SCHREIBEN AUF TAPE ZUR WEITERGABE
      REWIND NBAND3						      REWIND NBAND3
      WRITE (NBAND3) NZKAPO,JWS,NPARI,NZKPB,NREL		      WRITE (NBAND3) NZKAPO,JWS,NPARI,NZKPB,NREL
      DO 1102 M=1,NZKAPO					      DO 1102 M=1,NZKAPO
      MH=KAPO(M)						      MH=KAPO(M)
      WRITE (NBAND3) LWERT(4,MH),REDM(MH)/H2M,E2K(MH),		      WRITE (NBAND3) LWERT(4,MH),REDM(MH)/H2M,E2K(MH),
     *      JWERT(3,MH),MASSE(1,MH),MASSE(2,MH),MLAD(1,MH),ML	     *      JWERT(3,MH),MASSE(1,MH),MASSE(2,MH),MLAD(1,MH),ML
     *      EBIN(M),WNORM(M),RUHM(1,MH),RUHM(2,MH),B		     *      EBIN(M),WNORM(M),RUHM(1,MH),RUHM(2,MH),B
1102  CONTINUE							1102  CONTINUE
      IF(KAUSD.LT.4) GOTO 840					      IF(KAUSD.LT.4) GOTO 840
      WRITE(NOUT,1017)						      WRITE(NOUT,1017)
1017  FORMAT(' VOLLE H-MATRIX NACH CHEPOK')			1017  FORMAT(' VOLLE H-MATRIX NACH CHEPOK')
      CALL SCHEMA(DM(1,1,2,2),MMM,MMM,NDIMD,10)			      CALL SCHEMA(DM(1,1,2,2),MMM,MMM,NDIMD,10)
      GOTO 840							      GOTO 840
C								C
800   CONTINUE							800   CONTINUE
C     BINDUNGS RECHNUNG						C     BINDUNGS RECHNUNG
      IF(KAUSD.LT.0) GOTO 840					      IF(KAUSD.LT.0) GOTO 840
C     KEIN AUSDRUCK DER ENERGIEN FUER KAUSD .LT. 0		C     KEIN AUSDRUCK DER ENERGIEN FUER KAUSD .LT. 0
      I=0							      I=0
      LU=2							      LU=2
      IF(IZWEI.EQ.0) LU=16					      IF(IZWEI.EQ.0) LU=16
      DO 70 K=1,NZKA						      DO 70 K=1,NZKA
      MMP=NZP(K)						      MMP=NZP(K)
      DO 71 M=1,MMP						      DO 71 M=1,MMP
      KK = NZQ(K) + M						      KK = NZQ(K) + M
      A1=.0							      A1=.0
      I=I+1							      I=I+1
      WRITE(NOUT,1009) M,K,I					      WRITE(NOUT,1009) M,K,I
      DO 72 L=LU,NZOP						      DO 72 L=LU,NZOP
      IF(IZWEI.EQ.1) OPWERT(L,KK )=OPWERT(L,KK )/OPWERT(1,KK 	      IF(IZWEI.EQ.1) OPWERT(L,KK )=OPWERT(L,KK )/OPWERT(1,KK 
      IF(IZWEI.EQ.0) OPWERT(L,KK )=OPWERT(L,KK )/OPWERT(15,KK	      IF(IZWEI.EQ.0) OPWERT(L,KK )=OPWERT(L,KK )/OPWERT(15,KK
      IF(MREG(L).NE.0) WRITE(NOUT,VARFOR(L)) OPWERT(L,KK)	      IF(MREG(L).NE.0) WRITE(NOUT,VARFOR(L)) OPWERT(L,KK)
72    A1=A1+OPWERT(L,KK )					72    A1=A1+OPWERT(L,KK )
      WRITE (NOUT,1008) A1					      WRITE (NOUT,1008) A1
71    CONTINUE							71    CONTINUE
   70 CONTINUE							   70 CONTINUE
C								C
840   CALL UMNORM(NENTP,NBAND9,MEMPT,2,IPLO)			840   CALL UMNORM(NENTP,NBAND9,MEMPT,2,IPLO)
      IF (KAUSD.LT.2) GOTO 845					      IF (KAUSD.LT.2) GOTO 845
      WRITE(NOUT,*) 'VOR ORTHO H'				      WRITE(NOUT,*) 'VOR ORTHO H'
      CALL SCHEMA(DM(1,1,2,2),MMM,MMM,NDIMD,MIN(MMM,10))	      CALL SCHEMA(DM(1,1,2,2),MMM,MMM,NDIMD,MIN(MMM,10))
      WRITE(NOUT,*) 'VOR ORTHO EN'				      WRITE(NOUT,*) 'VOR ORTHO EN'
      CALL SCHEMA(DM(1,1,2,1),MMM,MMM,NDIMD,MIN(MMM,10))	      CALL SCHEMA(DM(1,1,2,1),MMM,MMM,NDIMD,MIN(MMM,10))
845   CALL ORTHO(NZQ(NZKA+1),EOV)				845   CALL ORTHO(NZQ(NZKA+1),EOV)
C								C
C     ENDE LOOP ITT						C     ENDE LOOP ITT
850   CONTINUE							850   CONTINUE
C								C
      IF (MEMPT.EQ.1) GOTO 950					      IF (MEMPT.EQ.1) GOTO 950
C     NUR FUER BINDUNGSRECHNUNG (MEMPT=2)			C     NUR FUER BINDUNGSRECHNUNG (MEMPT=2)
      DO 242 K=1,NZZ						      DO 242 K=1,NZZ
C     LOOP AUSGEDRUCKTE BASISVEKTOREN				C     LOOP AUSGEDRUCKTE BASISVEKTOREN
C								C
      WRITE(NOUT,1014) K					      WRITE(NOUT,1014) K
 1014 FORMAT (6H0 DER ,I3,24H TE EIGENVEKTOR LIEFERT //)	 1014 FORMAT (6H0 DER ,I3,24H TE EIGENVEKTOR LIEFERT //)
      X=0.							      X=0.
      DO 852, L=LU, NZOP					      DO 852, L=LU, NZOP
       OPW(L)=OBWERT(L,K,K)/OBWERT(1,K,K)			       OPW(L)=OBWERT(L,K,K)/OBWERT(1,K,K)
      IF(MREG(L).NE.0) WRITE(NOUT,VARFOR(L)) OPW(L)		      IF(MREG(L).NE.0) WRITE(NOUT,VARFOR(L)) OPW(L)
852   X=X+OPW(L)						852   X=X+OPW(L)
      WRITE (NOUT,1008) X					      WRITE (NOUT,1008) X
C								C
      DO 300 M=1,MMM						      DO 300 M=1,MMM
      OPWERT(2,M) = 0.						      OPWERT(2,M) = 0.
      DO 299 L=1,MMM						      DO 299 L=1,MMM
299   OPWERT(2,M) = OPWERT(2,M) + QQ(L,K) * DM(M,L,2,1)		299   OPWERT(2,M) = OPWERT(2,M) + QQ(L,K) * DM(M,L,2,1)
      OPWERT(2,M)=OPWERT(2,M)/SQRT(OBWERT(1,K,K)*DM(M,M,2,1))	      OPWERT(2,M)=OPWERT(2,M)/SQRT(OBWERT(1,K,K)*DM(M,M,2,1))
 300  OPWERT(1,M) = QQ(M,K) * SQRT(DM(M,M,2,1))			 300  OPWERT(1,M) = QQ(M,K) * SQRT(DM(M,M,2,1))
      WRITE(NOUT,302) K						      WRITE(NOUT,302) K
      DO 76 MK=1,MMM						      DO 76 MK=1,MMM
76    NUMK(MK)=10000.*OPWERT(1,MK)				76    NUMK(MK)=10000.*OPWERT(1,MK)
      DO 75  L=1,NZKA						      DO 75  L=1,NZKA
      KK = NZQ(L)+1						      KK = NZQ(L)+1
      KL = NZQ(L+1)						      KL = NZQ(L+1)
75    WRITE (NOUT,105) L,(NUMK(M),M=KK,KL)			75    WRITE (NOUT,105) L,(NUMK(M),M=KK,KL)
  302 FORMAT(16H ENTWICKLUNG DES,I3,' TEN ',			  302 FORMAT(16H ENTWICKLUNG DES,I3,' TEN ',
     1'EIGENVEKTORS,AUSGEDRUECKT DURCH NORMIERTE BASISVEKTORE	     1'EIGENVEKTORS,AUSGEDRUECKT DURCH NORMIERTE BASISVEKTORE
      WRITE (NOUT,320)						      WRITE (NOUT,320)
320   FORMAT('0UEBERLAPP DES EIGENVEKTORS MIT NORM. BASISVEKT	320   FORMAT('0UEBERLAPP DES EIGENVEKTORS MIT NORM. BASISVEKT
      DO 78 MK=1,MMM						      DO 78 MK=1,MMM
78    NUMK(MK)=10000.*OPWERT(2,MK)				78    NUMK(MK)=10000.*OPWERT(2,MK)
      DO 77 L=1,NZKA						      DO 77 L=1,NZKA
      KK = NZQ(L)+1						      KK = NZQ(L)+1
      KL = NZQ(L+1)						      KL = NZQ(L+1)
77    WRITE (NOUT,105) L,(NUMK(M),M=KK,KL)			77    WRITE (NOUT,105) L,(NUMK(M),M=KK,KL)
      WRITE(NOUT,305)						      WRITE(NOUT,305)
  305 FORMAT(23H0UEBERLAPP MIT KANAELEN/ )			  305 FORMAT(23H0UEBERLAPP MIT KANAELEN/ )
      DO 304 L=1,NZKA						      DO 304 L=1,NZKA
      KK= NZQ(L)+1						      KK= NZQ(L)+1
      KL = NZQ(L+1)						      KL = NZQ(L+1)
      A1= .0							      A1= .0
      A2= .0							      A2= .0
      DO 306 M=KK,KL						      DO 306 M=KK,KL
      DO 307 N=KK,KL						      DO 307 N=KK,KL
  307 A1= A1+ DM(M,N,2,1)*QQ(M,K)*QQ(N,K)			  307 A1= A1+ DM(M,N,2,1)*QQ(M,K)*QQ(N,K)
      DO 306 N=1,MMM						      DO 306 N=1,MMM
  306 A2 =A2+ DM(M,N,2,1)*QQ(M,K)*QQ(N,K)			  306 A2 =A2+ DM(M,N,2,1)*QQ(M,K)*QQ(N,K)
      IF(A1.GT.1.D-10) GOTO 1105				      IF(A1.GT.1.D-10) GOTO 1105
      OPWERT(2,L) = .0						      OPWERT(2,L) = .0
      GOTO 304							      GOTO 304
 1105 OPWERT(2,L) = A2 / SQRT(A1)				 1105 OPWERT(2,L) = A2 / SQRT(A1)
C      A1 IST NORMIERUNG DER KANALFUNKTIONEN BEZUEGLICH EN	C      A1 IST NORMIERUNG DER KANALFUNKTIONEN BEZUEGLICH EN
  304 CONTINUE							  304 CONTINUE
      DO 79 L=1,NZKA						      DO 79 L=1,NZKA
79    NUMK(L) = 10000. * OPWERT(2,L)				79    NUMK(L) = 10000. * OPWERT(2,L)
      WRITE (NOUT,'(1X,10I8)') (NUMK(L),L=1,NZKA)	      |	      WRITE (NOUT,105) (NUMK(L),L=1,NZKA)
C 105   FORMAT (1X,10I8)					C 105   FORMAT (1X,10I8)
C replaced to enable compatibility with red_mod_2.py      	C replaced to enable compatibility with red_mod_2.py      
105   FORMAT (I4,') ',1X,30I8)					105   FORMAT (I4,') ',1X,30I8)
  242 CONTINUE							  242 CONTINUE
C								C
C     ENDE LOOP ILAUF						C     ENDE LOOP ILAUF
950   CONTINUE							950   CONTINUE
C     FUER SMIN MUESSEN DIE FOLGENDEN CLOSE STATEMENTS AKTIVI	C     FUER SMIN MUESSEN DIE FOLGENDEN CLOSE STATEMENTS AKTIVI
CC     CLOSE(UNIT=5,STATUS='KEEP')				CC     CLOSE(UNIT=5,STATUS='KEEP')
CC     CLOSE(UNIT=9,STATUS='DELETE')				CC     CLOSE(UNIT=9,STATUS='DELETE')
CC     CLOSE(UNIT=10,STATUS='DELETE')				CC     CLOSE(UNIT=10,STATUS='DELETE')
CC     CLOSE(UNIT=11,STATUS='DELETE')				CC     CLOSE(UNIT=11,STATUS='DELETE')
CC     CLOSE(UNIT=15,STATUS='DELETE')				CC     CLOSE(UNIT=15,STATUS='DELETE')
CC     RETURN							CC     RETURN
C								C
      WRITE (NOUT,1050)						      WRITE (NOUT,1050)
      STOP							      STOP
C								C
   16 WRITE(NOUT,1006)  N,J					   16 WRITE(NOUT,1006)  N,J
      STOP							      STOP
808    WRITE(NOUT, 809)NZBASV,NZBMAX				808    WRITE(NOUT, 809)NZBASV,NZBMAX
809    FORMAT(' TOO MANY BASISVECTORS',2I10)			809    FORMAT(' TOO MANY BASISVECTORS',2I10)
       STOP							       STOP
901   WRITE(NOUT, 902)NZKA,NZKMAX				901   WRITE(NOUT, 902)NZKA,NZKMAX
902   FORMAT(' TOO MANY CHANNELS',2I5)				902   FORMAT(' TOO MANY CHANNELS',2I5)
      STOP							      STOP
905   WRITE(NOUT, 906)MM,NDIMD					905   WRITE(NOUT, 906)MM,NDIMD
906   FORMAT(' TOO MANY RADIALPARAMETERS*CHANNELS',2I5)		906   FORMAT(' TOO MANY RADIALPARAMETERS*CHANNELS',2I5)
1050  FORMAT(//,1X,'ENDE DER RECHNUNG VON ENDMAT')		1050  FORMAT(//,1X,'ENDE DER RECHNUNG VON ENDMAT')
      END							      END
      SUBROUTINE POLKA(NBAND3)					      SUBROUTINE POLKA(NBAND3)
      IMPLICIT double precision (A-H,O-Z)		      |	      IMPLICIT REAL*8 (A-H,O-Z)
C								C
        INCLUDE 'par/DR2END_AK'					        INCLUDE 'par/DR2END_AK'
C								C
      COMMON /PARA/ PAR(MZPARM,NZKMAX),NAR(MZPARM,NZKMAX)	      COMMON /PARA/ PAR(MZPARM,NZKMAX),NAR(MZPARM,NZKMAX)
C								C
      COMMON /POKA/ B, IKAPO(NZKMAX),IZP(NZKMAX),IZQ(NZKMAX+1	      COMMON /POKA/ B, IKAPO(NZKMAX),IZP(NZKMAX),IZQ(NZKMAX+1
     *               NZKAPO,KAPO(NZKMAX),IZPWM			     *               NZKAPO,KAPO(NZKMAX),IZPWM
C								C
      COMMON /KAN/ OPWERT(NZOPER+2,NDIMD), WNORM(NZKMAX),	      COMMON /KAN/ OPWERT(NZOPER+2,NDIMD), WNORM(NZKMAX),
     *             NZP(NZKMAX), EBIN(NZKMAX), MLAD(2,NZKMAX),	     *             NZP(NZKMAX), EBIN(NZKMAX), MLAD(2,NZKMAX),
     *             H2M, E2R0 ,					     *             H2M, E2R0 ,
     *  RUHM(2,NZKMAX), EBIN1(NZKMAX), NREL			     *  RUHM(2,NZKMAX), EBIN1(NZKMAX), NREL
C								C
      COMMON /UMNO/ REDM(NZKMAX), NZKA, NZKB, MMM, 		      COMMON /UMNO/ REDM(NZKMAX), NZKA, NZKB, MMM, 
     *              NZQ(NZKMAX+1), LWERT(5,NZKMAX), 		     *              NZQ(NZKMAX+1), LWERT(5,NZKMAX), 
     *              KPK(NZKMAX), MASSE(2,NZKMAX)		     *              KPK(NZKMAX), MASSE(2,NZKMAX)
C								C
      DIMENSION IDUM(MZPARM),DUM(MZPARM)			      DIMENSION IDUM(MZPARM),DUM(MZPARM)
C								C
      IZQ(1)=0							      IZQ(1)=0
      K1=1							      K1=1
      IZPWM=0							      IZPWM=0
      DO 20 I=1,NZKAPO						      DO 20 I=1,NZKAPO
      K2=KAPO(I)						      K2=KAPO(I)
      IZP(I)=0							      IZP(I)=0
      DO 10 KH=K1,K2						      DO 10 KH=K1,K2
10    IZP(I)=IZP(I)+NZP(KH)					10    IZP(I)=IZP(I)+NZP(KH)
      K1=K2+1							      K1=K2+1
      IZQ(I+1)=IZQ(I)+IZP(I)					      IZQ(I+1)=IZQ(I)+IZP(I)
20    IZPWM=MAX0(IZPWM,IZP(I))					20    IZPWM=MAX0(IZPWM,IZP(I))
      IF(IZQ(NZKAPO+1).NE.NZQ(K2+1)) STOP 333			      IF(IZQ(NZKAPO+1).NE.NZQ(K2+1)) STOP 333
      WRITE (NBAND3) IZQ(NZKAPO+1),IZPWM,(IZP(I),IZQ(I),I=1,N	      WRITE (NBAND3) IZQ(NZKAPO+1),IZPWM,(IZP(I),IZQ(I),I=1,N
      K1=1							      K1=1
      DO 30 IH=1,NZKAPO						      DO 30 IH=1,NZKAPO
      K2=KAPO(IH)						      K2=KAPO(IH)
      I=0							      I=0
      DO 25 KH=K1,K2						      DO 25 KH=K1,K2
      N=NZP(KH)							      N=NZP(KH)
      DO 24 NH=1,N						      DO 24 NH=1,N
      I=I+1							      I=I+1
      IDUM(I)=NAR(NH,KH)					      IDUM(I)=NAR(NH,KH)
24    DUM(I)=PAR(NH,KH)						24    DUM(I)=PAR(NH,KH)
25     CONTINUE							25     CONTINUE
      WRITE(NBAND3) (IDUM(K),K=1,IZPWM)				      WRITE(NBAND3) (IDUM(K),K=1,IZPWM)
      WRITE(NBAND3) (DUM(K),K=1,IZPWM)				      WRITE(NBAND3) (DUM(K),K=1,IZPWM)
30    K1=K2+1							30    K1=K2+1
      RETURN							      RETURN
      END							      END
      SUBROUTINE CHEPOK(IDRUCK,MREG,NZOP)			      SUBROUTINE CHEPOK(IDRUCK,MREG,NZOP)
      IMPLICIT double precision (A-H,O-Z)		      |	      IMPLICIT REAL*8 (A-H,O-Z)
C     CKECKT DIE ERGEBNISSE					C     CKECKT DIE ERGEBNISSE
C								C
        INCLUDE 'par/DR2END_AK'					        INCLUDE 'par/DR2END_AK'
C								C
      COMMON /PARA/ PAR(MZPARM,NZKMAX),NAR(MZPARM,NZKMAX)	      COMMON /PARA/ PAR(MZPARM,NZKMAX),NAR(MZPARM,NZKMAX)
C								C
      COMMON /POKA/ B, IKAPO(NZKMAX),IZP(NZKMAX),IZQ(NZKMAX+1	      COMMON /POKA/ B, IKAPO(NZKMAX),IZP(NZKMAX),IZQ(NZKMAX+1
     *               NZKAPO,KAPO(NZKMAX),IZPWM			     *               NZKAPO,KAPO(NZKMAX),IZPWM
C								C
      COMMON /BIGG/ DM(NDIMD,NDIMD,2,2)				      COMMON /BIGG/ DM(NDIMD,NDIMD,2,2)
C								C
      COMMON /UMNO/ REDM(NZKMAX), NZKA, NZKB, MMM, 		      COMMON /UMNO/ REDM(NZKMAX), NZKA, NZKB, MMM, 
     *              NZQ(NZKMAX+1), LWERT(5,NZKMAX), 		     *              NZQ(NZKMAX+1), LWERT(5,NZKMAX), 
     *              KPK(NZKMAX), MASSE(2,NZKMAX)		     *              KPK(NZKMAX), MASSE(2,NZKMAX)
C								C
      COMMON /KAN/ OPWERT(NZOPER+2,NDIMD), WNORM(NZKMAX),	      COMMON /KAN/ OPWERT(NZOPER+2,NDIMD), WNORM(NZKMAX),
     *             NZP(NZKMAX), EBIN(NZKMAX), MLAD(2,NZKMAX),	     *             NZP(NZKMAX), EBIN(NZKMAX), MLAD(2,NZKMAX),
     *             H2M, E2R0 ,					     *             H2M, E2R0 ,
     *  RUHM(2,NZKMAX), EBIN1(NZKMAX), NREL			     *  RUHM(2,NZKMAX), EBIN1(NZKMAX), NREL
C								C
      DIMENSION MREG(NZOPER),HILF(NDIMD),GAMMA(31)		      DIMENSION MREG(NZOPER),HILF(NDIMD),GAMMA(31)
C								C
C     BESTIMMUNG DER KANAELE,DIE ZUE EINEM POLYNOMKANAL GEHOE	C     BESTIMMUNG DER KANAELE,DIE ZUE EINEM POLYNOMKANAL GEHOE
      GAMMA(1)= SQRT(3.1415926535897932384)			      GAMMA(1)= SQRT(3.1415926535897932384)
      GAMMA(2)=1.						      GAMMA(2)=1.
      DO 100 K=1,28						      DO 100 K=1,28
  100 GAMMA(K+2)= DBLE(K)*GAMMA(K)/2.				  100 GAMMA(K+2)= DBLE(K)*GAMMA(K)/2.
C      GAMMA(2N+1)=GAMMAFUNKTION((2N+1)/2)			C      GAMMA(2N+1)=GAMMAFUNKTION((2N+1)/2)
C      GAMMA(2N)=GAMMAFUNKTION(N-1)				C      GAMMA(2N)=GAMMAFUNKTION(N-1)
      DO 1000 KP=1,NZKAPO					      DO 1000 KP=1,NZKAPO
      KH1=0							      KH1=0
      KH2=0							      KH2=0
      DO 2 KH=1,NZKA						      DO 2 KH=1,NZKA
      IF(IKAPO(KH).NE.KP) GOTO 2				      IF(IKAPO(KH).NE.KP) GOTO 2
      IF(KH1.NE.0) GOTO 1					      IF(KH1.NE.0) GOTO 1
      KH1=KH							      KH1=KH
1     KH2=KH							1     KH2=KH
2     CONTINUE							2     CONTINUE
      DO 61 K=KH1,KH2						      DO 61 K=KH1,KH2
      MMK=NZP(K)						      MMK=NZP(K)
      MN=2*LWERT(4,K)+4*KPK(K)+3				      MN=2*LWERT(4,K)+4*KPK(K)+3
      IF (MN.GT.31) STOP 201					      IF (MN.GT.31) STOP 201
      DO 61 M=1,MMK						      DO 61 M=1,MMK
      KK = NZQ(K) + M						      KK = NZQ(K) + M
      AA= SQRT(2.*PAR(M,K)/REDM(K))				      AA= SQRT(2.*PAR(M,K)/REDM(K))
   61 HILF(KK )=(2.*(AA**MN)/GAMMA(MN))*OPWERT(NZOPER+1,KK)	   61 HILF(KK )=(2.*(AA**MN)/GAMMA(MN))*OPWERT(NZOPER+1,KK)
C      HERAUSDIVIDIEREN DES NORMINTEGRALS UEBER RADIALFUNKTIO	C      HERAUSDIVIDIEREN DES NORMINTEGRALS UEBER RADIALFUNKTIO
C      BEACHTE PAR UMDEFINIERT					C      BEACHTE PAR UMDEFINIERT
      MMP=IZP(KP)						      MMP=IZP(KP)
      WNORM(KP) = .0						      WNORM(KP) = .0
      LL = NZQ(KH1) + 1						      LL = NZQ(KH1) + 1
      DO 62 M=1,MMP						      DO 62 M=1,MMP
C    CHECK INTERNE NORM, IDENTISCH FUER ALLE RADIALPARAMETER	C    CHECK INTERNE NORM, IDENTISCH FUER ALLE RADIALPARAMETER
      KK = NZQ(KH1) + M						      KK = NZQ(KH1) + M
      A1=HILF(KK )-HILF(LL )					      A1=HILF(KK )-HILF(LL )
      A2=HILF(KK )+HILF(LL )					      A2=HILF(KK )+HILF(LL )
      IF( ABS(A1/A2).GT..001) GOTO  63				      IF( ABS(A1/A2).GT..001) GOTO  63
   62 WNORM(KP) = WNORM(KP) + HILF(KK )				   62 WNORM(KP) = WNORM(KP) + HILF(KK )
C     WNORM IST DAS NORMIERUNGSINTEGRAL DER FRAGMENTE,FUER AL	C     WNORM IST DAS NORMIERUNGSINTEGRAL DER FRAGMENTE,FUER AL
C     RADIALPARAMETER GLEICH,UNABHAENGIG VON L			C     RADIALPARAMETER GLEICH,UNABHAENGIG VON L
      WNORM(KP) = WNORM(KP)/ DBLE(MMP)				      WNORM(KP) = WNORM(KP)/ DBLE(MMP)
       IF(IDRUCK.LT.0) GOTO 168					       IF(IDRUCK.LT.0) GOTO 168
       WRITE(NOUT,164) KP,WNORM(KP)				       WRITE(NOUT,164) KP,WNORM(KP)
      IF(IDRUCK.LT.2) GOTO 168					      IF(IDRUCK.LT.2) GOTO 168
       KANF=IZQ(KP)+1						       KANF=IZQ(KP)+1
       KEND=IZQ(KP)+MMP						       KEND=IZQ(KP)+MMP
       WRITE(NOUT,165)(HILF(KK),KK=KANF,KEND)			       WRITE(NOUT,165)(HILF(KK),KK=KANF,KEND)
164   FORMAT(' KANAL',I5,' WNORM',E20.12)			164   FORMAT(' KANAL',I5,' WNORM',E20.12)
165   FORMAT(' OPW ',10E12.5)					165   FORMAT(' OPW ',10E12.5)
168   CONTINUE							168   CONTINUE
      DO 64 K=KH1,KH2						      DO 64 K=KH1,KH2
      MMK=NZP(K)						      MMK=NZP(K)
      MN=2*LWERT(4,K)+4*KPK(K)+5				      MN=2*LWERT(4,K)+4*KPK(K)+5
      IF (MN-4.GT.31) STOP 201					      IF (MN-4.GT.31) STOP 201
      AKINF=2*KPK(K)*(MN-2*KPK(K)-4)				      AKINF=2*KPK(K)*(MN-2*KPK(K)-4)
      FAKK=0.							      FAKK=0.
C     BEI RELATIVISTISCHER KINETISCHER ENERGIE IST DER RELATI	C     BEI RELATIVISTISCHER KINETISCHER ENERGIE IST DER RELATI
C     NICHT BERECHNET						C     NICHT BERECHNET
      IF(MREG(2).NE.0)						      IF(MREG(2).NE.0)
     *FAKK=.5*H2M*WNORM(KP)*(GAMMA(MN-4)*AKINF-GAMMA(MN))	     *FAKK=.5*H2M*WNORM(KP)*(GAMMA(MN-4)*AKINF-GAMMA(MN))
      DO 64 M=1,MMK						      DO 64 M=1,MMK
      KK = NZQ(K) + M						      KK = NZQ(K) + M
      A3=SQRT(2.*PAR(M,K)/REDM(K))				      A3=SQRT(2.*PAR(M,K)/REDM(K))
   64 OPWERT(NZOPER+2,KK) =					   64 OPWERT(NZOPER+2,KK) =
     *   (OPWERT(NZOPER+2,KK) + FAKK*(A3**(4-MN)))/OPWERT(NZO	     *   (OPWERT(NZOPER+2,KK) + FAKK*(A3**(4-MN)))/OPWERT(NZO
C      ABZIEHEN DER KINETISCHEN ENERGIE DER RELATIVBEWEGUNG D	C      ABZIEHEN DER KINETISCHEN ENERGIE DER RELATIVBEWEGUNG D
      IF(IDRUCK.GT.1) WRITE(NOUT,165) (OPWERT(NZOPER+2,KK),KK	      IF(IDRUCK.GT.1) WRITE(NOUT,165) (OPWERT(NZOPER+2,KK),KK
C								C
      EBIN1(KP) = .0						      EBIN1(KP) = .0
      IF (REDM(KH1) .LT. 0.5001) GOTO 661			      IF (REDM(KH1) .LT. 0.5001) GOTO 661
C       GOTO 661 FUER 1 ODER 2 TEILCHEN				C       GOTO 661 FUER 1 ODER 2 TEILCHEN
      LL = IZQ(KP) + 1						      LL = IZQ(KP) + 1
      DO 65 M=1,MMP						      DO 65 M=1,MMP
      KK = IZQ(KP) + M						      KK = IZQ(KP) + M
      B1=OPWERT(NZOPER+2,KK )-OPWERT(NZOPER+2,LL )		      B1=OPWERT(NZOPER+2,KK )-OPWERT(NZOPER+2,LL )
      B2=OPWERT(NZOPER+2,KK )+OPWERT(NZOPER+2,LL )		      B2=OPWERT(NZOPER+2,KK )+OPWERT(NZOPER+2,LL )
      IF((ABS(OPWERT(NZOPER+2,LL)) + ABS(B2)).LT.1.E-8) GOTO 	      IF((ABS(OPWERT(NZOPER+2,LL)) + ABS(B2)).LT.1.E-8) GOTO 
c     IF( ABS(B1/B2).GT.. 001) GOTO 163				c     IF( ABS(B1/B2).GT.. 001) GOTO 163
   65 EBIN1(KP) = EBIN1(KP) + OPWERT(NZOPER+2,KK)		   65 EBIN1(KP) = EBIN1(KP) + OPWERT(NZOPER+2,KK)
 661  CONTINUE							 661  CONTINUE
      EBIN1(KP) = EBIN1(KP)/ DBLE(MMP)				      EBIN1(KP) = EBIN1(KP)/ DBLE(MMP)
      IF(EBIN(KP).EQ.0.) EBIN(KP)=EBIN1(KP)			      IF(EBIN(KP).EQ.0.) EBIN(KP)=EBIN1(KP)
      IF (MREG(3).EQ.0) GOTO 60					      IF (MREG(3).EQ.0) GOTO 60
      DO 66 K=KH1,KH2						      DO 66 K=KH1,KH2
      DO 66 K1=KH1,KH2						      DO 66 K1=KH1,KH2
      MMK=NZP(K)						      MMK=NZP(K)
      MMK1=NZP(K1)						      MMK1=NZP(K1)
      M2=LWERT(4,K)+KPK(K)+KPK(K1)+1				      M2=LWERT(4,K)+KPK(K)+KPK(K1)+1
      IF (2*M2.GT.31) STOP 203					      IF (2*M2.GT.31) STOP 203
      FAKK=DBLE(MLAD(1,K)*MLAD(2,K))*E2R0*WNORM(KP)*SQRT(REDM	      FAKK=DBLE(MLAD(1,K)*MLAD(2,K))*E2R0*WNORM(KP)*SQRT(REDM
     1  *GAMMA(2*M2)*.5						     1  *GAMMA(2*M2)*.5
      DO 66 M=1,MMK						      DO 66 M=1,MMK
      DO 66 N=1,MMK1						      DO 66 N=1,MMK1
      A1=(PAR(M,K)+PAR(N,K1))/REDM(K)				      A1=(PAR(M,K)+PAR(N,K1))/REDM(K)
      M3=NZQ(K)+M						      M3=NZQ(K)+M
      M4=NZQ(K1)+N						      M4=NZQ(K1)+N
      DM(M3,M4,1,2) = DM(M3,M4,1,2) - FAKK*(A1**(-M2))		      DM(M3,M4,1,2) = DM(M3,M4,1,2) - FAKK*(A1**(-M2))
c     write(nout,*) 'punkt',FAKK*(A1**(-M2)),WNORM(KP)		c     write(nout,*) 'punkt',FAKK*(A1**(-M2)),WNORM(KP)
C      ABZIEHEN DER PUNKTCOULOMBENERGIE DER FRAGMENTE		C      ABZIEHEN DER PUNKTCOULOMBENERGIE DER FRAGMENTE
66    CONTINUE							66    CONTINUE
 60   CONTINUE							 60   CONTINUE
1000  CONTINUE							1000  CONTINUE
 1005 FORMAT(//,' BINDUNGSENERGIEN IN MEV',/,(12F10.4))		 1005 FORMAT(//,' BINDUNGSENERGIEN IN MEV',/,(12F10.4))
       WRITE(NOUT,1005)(EBIN(K),K=1,NZKAPO)			       WRITE(NOUT,1005)(EBIN(K),K=1,NZKAPO)
       WRITE(NOUT,1005)(EBIN1(K),K=1,NZKAPO)			       WRITE(NOUT,1005)(EBIN1(K),K=1,NZKAPO)
      B = .0							      B = .0
      DO 900   K = 1,NZKAPO					      DO 900   K = 1,NZKAPO
  900 B = B + WNORM(K)						  900 B = B + WNORM(K)
      B=DBLE(NZKAPO)/B						      B=DBLE(NZKAPO)/B
      DO 901    K = 1,NZKAPO					      DO 901    K = 1,NZKAPO
      KH=KAPO(K)						      KH=KAPO(K)
      WNORM(K) = 1./ SQRT(B*WNORM(K)*(REDM(KH)**1.5))		      WNORM(K) = 1./ SQRT(B*WNORM(K)*(REDM(KH)**1.5))
c     write(nout,*) 'wnorm',wnorm(k)				c     write(nout,*) 'wnorm',wnorm(k)
  901 CONTINUE							  901 CONTINUE
      RETURN							      RETURN
   63 WRITE(NOUT,1006)  KP,KK,LL				   63 WRITE(NOUT,1006)  KP,KK,LL
1006  FORMAT(' FEHLER IN DEN EINGABEN,NORM',I3,'-KANAL, WEITE	1006  FORMAT(' FEHLER IN DEN EINGABEN,NORM',I3,'-KANAL, WEITE
      STOP 'CHEPOK'						      STOP 'CHEPOK'
  163 WRITE(NOUT,1007)  KP,KK,LL				  163 WRITE(NOUT,1007)  KP,KK,LL
1007  FORMAT(' FEHLER IN DEN EINGABEN, EBIN',I3,'-KANAL, WEIT	1007  FORMAT(' FEHLER IN DEN EINGABEN, EBIN',I3,'-KANAL, WEIT
      STOP 'CHEPOK'						      STOP 'CHEPOK'
      END							      END
      SUBROUTINE DEFPOK(NZP,NZKA,IND,NZKB,NZKPB)		      SUBROUTINE DEFPOK(NZP,NZKA,IND,NZKB,NZKPB)
      IMPLICIT double precision (A-H,O-Z)		      |	      IMPLICIT REAL*8 (A-H,O-Z)
C     DEFINIERT DIE POLYNOMKANAELE				C     DEFINIERT DIE POLYNOMKANAELE
C								C
        INCLUDE 'par/DR2END_AK'					        INCLUDE 'par/DR2END_AK'
C								C
      COMMON /POKA/ B, IKAPO(NZKMAX),IZP(NZKMAX),IZQ(NZKMAX+1	      COMMON /POKA/ B, IKAPO(NZKMAX),IZP(NZKMAX),IZQ(NZKMAX+1
     *               NZKAPO,KAPO(NZKMAX),IZPWM			     *               NZKAPO,KAPO(NZKMAX),IZPWM
C								C
      DIMENSION NZP(NZKMAX)					      DIMENSION NZP(NZKMAX)
C								C
      IZQ(1)=0							      IZQ(1)=0
      IF(IND.EQ.0) GOTO 30					      IF(IND.EQ.0) GOTO 30
      IF(NZKAPO.EQ.0) GOTO 30					      IF(NZKAPO.EQ.0) GOTO 30
      IHZ=0							      IHZ=0
      DO 20 IHX=1,NZKAPO					      DO 20 IHX=1,NZKAPO
      WRITE(NOUT, 5)IHX						      WRITE(NOUT, 5)IHX
5     FORMAT(' ZUM',I3,' -TEN POLYNOMKANAL GEHOEREN DIE KANAE	5     FORMAT(' ZUM',I3,' -TEN POLYNOMKANAL GEHOEREN DIE KANAE
      IHY=0							      IHY=0
      DO 10 IH=1,NZKA						      DO 10 IH=1,NZKA
      IF(IKAPO(IH).NE.IHX) GOTO 8				      IF(IKAPO(IH).NE.IHX) GOTO 8
      KAPO(IHX)=IH						      KAPO(IHX)=IH
C    ZUORDNUNG POLYNOMKANAL LETZTER EINFACHER KANAL		C    ZUORDNUNG POLYNOMKANAL LETZTER EINFACHER KANAL
      IHY=IHY+NZP(IH)						      IHY=IHY+NZP(IH)
      WRITE(NOUT, 6)IH						      WRITE(NOUT, 6)IH
6     FORMAT(I5)						6     FORMAT(I5)
8     IF(IHZ.GT.0) GOTO 10					8     IF(IHZ.GT.0) GOTO 10
      IF(IH.NE.NZKB) GOTO 10					      IF(IH.NE.NZKB) GOTO 10
      IHZ=1							      IHZ=1
      NZKB=IKAPO(IH)						      NZKB=IKAPO(IH)
10    CONTINUE							10    CONTINUE
      IZP(IHX)=IHY						      IZP(IHX)=IHY
      IZQ(IHX+1)=IZQ(IHX)+IHY					      IZQ(IHX+1)=IZQ(IHX)+IHY
20    CONTINUE							20    CONTINUE
      NZKPB=IKAPO(NZKB)						      NZKPB=IKAPO(NZKB)
      RETURN							      RETURN
30    DO 35 I=1,NZKA						30    DO 35 I=1,NZKA
      KAPO(I)=I							      KAPO(I)=I
      IKAPO(I)=I						      IKAPO(I)=I
      IZP(I)=NZP(I)						      IZP(I)=NZP(I)
35    IZQ(I+1)=IZQ(I)+IZP(I)					35    IZQ(I+1)=IZQ(I)+IZP(I)
      NZKAPO=NZKA						      NZKAPO=NZKA
      NZKPB=NZKB						      NZKPB=NZKB
      RETURN							      RETURN
      END							      END
      SUBROUTINE ORTHO(NXH,EOV)					      SUBROUTINE ORTHO(NXH,EOV)
      IMPLICIT double precision (A-H,O-Z)		      |	      IMPLICIT REAL*8 (A-H,O-Z)
C								C
        INCLUDE 'par/DR2END_AK'					        INCLUDE 'par/DR2END_AK'
C								C
      COMMON /PARA/ PAR(MZPARM,NZKMAX),NAR(MZPARM,NZKMAX)	      COMMON /PARA/ PAR(MZPARM,NZKMAX),NAR(MZPARM,NZKMAX)
C								C
      COMMON /POKA/ B, IKAPO(NZKMAX),IZP(NZKMAX),IZQ(NZKMAX+1	      COMMON /POKA/ B, IKAPO(NZKMAX),IZP(NZKMAX),IZQ(NZKMAX+1
     *               NZKAPO,KAPO(NZKMAX),IZPWM			     *               NZKAPO,KAPO(NZKMAX),IZPWM
C								C
      COMMON /BIGG/ DM(NDIMD,NDIMD,2,2)				      COMMON /BIGG/ DM(NDIMD,NDIMD,2,2)
C								C
      COMMON /PLO/ SNORM(NZKMAX), QQN(NDIMD), SWW		      COMMON /PLO/ SNORM(NZKMAX), QQN(NDIMD), SWW
C								C
      COMMON /SHIFT/ ES(NZKMAX),IABLK,NKANB(NZKMAX)		      COMMON /SHIFT/ ES(NZKMAX),IABLK,NKANB(NZKMAX)
C								C
      COMMON /DREH/ MLWERT(5,NZBMAX),JWERT(3,NZKMAX),		      COMMON /DREH/ MLWERT(5,NZBMAX),JWERT(3,NZKMAX),
     *              MMS(3,NZBMAX),JWS				     *              MMS(3,NZBMAX),JWS
C								C
      COMMON QQ(NDIMD,NDIMD),				      |	      COMMON QQ(NDIMD,NZZMAX),
     *       INPUT, NBAND3, NBAND9, NENTP, NZZ, IAUW,		     *       INPUT, NBAND3, NBAND9, NENTP, NZZ, IAUW,
     *       IDRU, NB15, IPLO					     *       IDRU, NB15, IPLO
C								C
      COMMON /STORE/ZH(NDIMD,NDIMD),H(NDIMD,NDIMD), EN(NDIMD,	      COMMON /STORE/ZH(NDIMD,NDIMD),H(NDIMD,NDIMD), EN(NDIMD,
C								C
      DIMENSION FC1(8*NDIMD), Q(NXH), IWORK(5*NDIMD), IFAIL(N |	      DIMENSION FC1(8*NDIMD), Q(NDIMD), IWORK(5*NDIMD), IFAIL
     *          Qsrt(NXH) 				      <
							      <
      INTEGER   LDA, LDVL, LDVR, LWMAX, INFO, LWORK,INFU(NXH) <
							      <
      parameter (LWMAX = 1000)				      <
      double precision VL(NXH,NXH), VR(NXH,NXH), WR(NXH), WI( <
     *                 VL2(NXH,NXH),VR2(NXH,NXH),WR2(NXH),WI2 <
     *                 WORK(LWMAX)			      <
c     DIMENSION FC1(NDIMD),FC2(NDIMD)				c     DIMENSION FC1(NDIMD),FC2(NDIMD)
      CHARACTER*1 JOBZ,UPLO, RANGE,JOBVL,JOBVR		      |	      CHARACTER*1 JOBZ,UPLO, RANGE
C								C

C								C
      NX=NXH							      NX=NXH
 1000 FORMAT (1P10E13.5)					 1000 FORMAT (1P10E13.5)
 1101 FORMAT(/8X,'EIGENWERTE DES HAMILTONOPERATORS',//)	      |	1101  FORMAT(/8X,'EIGENWERTE DES HAMILTONOPERATORS',//)
 1103 FORMAT(/8X,'EIGENWERTE DER NORMMATRIX',//) 	      <
 1002 FORMAT(40I3)						 1002 FORMAT(40I3)
 1004 FORMAT(//8X,18H H-ERWARTUNGSWERTE//)			 1004 FORMAT(//8X,18H H-ERWARTUNGSWERTE//)
      IF(MOD(NENTP,2).EQ.1) GOTO 209				      IF(MOD(NENTP,2).EQ.1) GOTO 209
C     STREURECHNUNG UND BINGUNGRECHNUNG MIT GEKOPPELTEN FUNKT	C     STREURECHNUNG UND BINGUNGRECHNUNG MIT GEKOPPELTEN FUNKT
C     OHNE NENTP=3 WEGEN SINGLE RECHNUNG			C     OHNE NENTP=3 WEGEN SINGLE RECHNUNG
C     UMNORMIEREN VON EN UND H					C     UMNORMIEREN VON EN UND H
c     write(nout,*) 'normierung b=',b				c     write(nout,*) 'normierung b=',b
      DO 910   N = 1,NX						      DO 910   N = 1,NX
      DO 910   M = 1,NX						      DO 910   M = 1,NX
      DM(M,N,1,1) = B*DM(M,N,1,1)				      DM(M,N,1,1) = B*DM(M,N,1,1)
      DM(M,N,2,1) = B*DM(M,N,2,1)				      DM(M,N,2,1) = B*DM(M,N,2,1)
      DM(M,N,1,2) = B*DM(M,N,1,2)				      DM(M,N,1,2) = B*DM(M,N,1,2)
  910 DM(M,N,2,2) = B*DM(M,N,2,2)				  910 DM(M,N,2,2) = B*DM(M,N,2,2)
      CALL POLKA(NBAND3)					      CALL POLKA(NBAND3)
      WRITE(NBAND3)((DM(M,N,1,1),M=1,NX),N=1,NX)		      WRITE(NBAND3)((DM(M,N,1,1),M=1,NX),N=1,NX)
      WRITE(NBAND3)(( DM(M,N,1,2),M=1,NX),N=1,NX)		      WRITE(NBAND3)(( DM(M,N,1,2),M=1,NX),N=1,NX)
      DO 15  N=1,NX						      DO 15  N=1,NX
   15 Q(N)=DM(N,N,2,2)/DM(N,N,2,1)				   15 Q(N)=DM(N,N,2,2)/DM(N,N,2,1)
      WRITE(NOUT,1004)						      WRITE(NOUT,1004)
      WRITE(NOUT,1000)(Q(M),M=1,NX)				      WRITE(NOUT,1000)(Q(M),M=1,NX)
C     HIER WIRD H VERAENDERT ZUM SCHIEBEN DER SCHWELLEN		C     HIER WIRD H VERAENDERT ZUM SCHIEBEN DER SCHWELLEN
      IF(IABLK.EQ.0) GOTO 209					      IF(IABLK.EQ.0) GOTO 209
      N1=1							      N1=1
      DO 191 IH=1,IABLK						      DO 191 IH=1,IABLK
      DO 190 N=IZQ(N1)+1,IZQ(NKANB(IH)+1)			      DO 190 N=IZQ(N1)+1,IZQ(NKANB(IH)+1)
      DO 190 M=IZQ(N1)+1,IZQ(NKANB(IH)+1)			      DO 190 M=IZQ(N1)+1,IZQ(NKANB(IH)+1)
190   DM(M,N,2,2)=DM(M,N,2,2) + ES(IH)*DM(M,N,2,1)		190   DM(M,N,2,2)=DM(M,N,2,2) + ES(IH)*DM(M,N,2,1)
191   N1=NKANB(IH)+1						191   N1=NKANB(IH)+1
C     SCHIEBEN VOLLBRACHT					C     SCHIEBEN VOLLBRACHT
C       BINDUNGS UND STREURECHNUNG				C       BINDUNGS UND STREURECHNUNG
209   IF (IDRU.LT.1) GOTO 210					209   IF (IDRU.LT.1) GOTO 210
      WRITE(NOUT,*)' NORM UND HAMILTONMATRIX VOR DIAGONALISAT	      WRITE(NOUT,*)' NORM UND HAMILTONMATRIX VOR DIAGONALISAT
      CALL SCHEMA(DM(1,1,2,1),NX,NX,NDIMD,5)			      CALL SCHEMA(DM(1,1,2,1),NX,NX,NDIMD,5)
      CALL SCHEMA(DM(1,1,2,2) ,NX,NX,NDIMD,5)			      CALL SCHEMA(DM(1,1,2,2) ,NX,NX,NDIMD,5)
      IF(IDRU.LT.3)GOTO 210					      IF(IDRU.LT.3)GOTO 210
C     LAPACK-AUFRUF						C     LAPACK-AUFRUF
      JOBZ='V'						      <
      UPLO='U'						      <
      RANGE='A' 					      <
C     'A' = find 'A'll Eigenvectors, there is an issue when ' <
C      IF(NENTP.NE.0) RANGE='I'				      <
c     FUER BINDUNGSRECHNUNGEN NUR NZZ EIGENWERTE UND VEKTOREN <
      IL= 1						      <
      IU= NZZ						      <
      ABSTOL=0.00001					      <
      LWORK=8*NDIMD      				      <
      write(nout,*)'DSYEVX args: ',JOBZ,RANGE,UPLO	      <
       CALL DSYEVX(JOBZ,RANGE,UPLO,NX,DM(1,1,2,1),NDIMD,VL,VU	       CALL DSYEVX(JOBZ,RANGE,UPLO,NX,DM(1,1,2,1),NDIMD,VL,VU
     *  ABSTOL, MOUT,Q,ZH,NDIMD,FC1,LWORK,IWORK,IFAIL,IERR)	     *  ABSTOL, MOUT,Q,ZH,NDIMD,FC1,LWORK,IWORK,IFAIL,IERR)
C								C
      WRITE (NOUT,*) ' EIGENWERTE DER NORMMATRIX'		      WRITE (NOUT,*) ' EIGENWERTE DER NORMMATRIX'
      IF(IERR.NE.0) WRITE(NOUT,*) ' DIAGONALISATION FEHLERHAF	      IF(IERR.NE.0) WRITE(NOUT,*) ' DIAGONALISATION FEHLERHAF
      WRITE (NOUT,1000) (Q(M),M=1,NX)				      WRITE (NOUT,1000) (Q(M),M=1,NX)
      NZZ = MIN0(MAX0(1,NZZ),NX,NDIMD)			      |	      NZZ = MIN0(MAX0(1,NZZ),NX,NZZMAX)
      DO 1800  K=1,NZZ						      DO 1800  K=1,NZZ
      WRITE (NOUT,1008)  K					      WRITE (NOUT,1008)  K
      WRITE(NOUT,1007) (ZH(M,K),M,M=1,NX)			      WRITE(NOUT,1007) (ZH(M,K),M,M=1,NX)
 1800 CONTINUE							 1800 CONTINUE
      IF(IDRU.LT.4) GOTO 1811					      IF(IDRU.LT.4) GOTO 1811
C      IF(IDRU.LT.4) GOTO 210				      <
      DO 1810 K=1,NX						      DO 1810 K=1,NX
      DO 1810 KS=1,NX						      DO 1810 KS=1,NX
      EN(KS,K)=0.						      EN(KS,K)=0.
      DO 1808 M=1,NX						      DO 1808 M=1,NX	
      DO 1808 N=1,NX						      DO 1808 N=1,NX	
      EN(KS,K)=EN(KS,K)+ZH(M,KS)*DM(M,N,2,2)*ZH(N,K)		      EN(KS,K)=EN(KS,K)+ZH(M,KS)*DM(M,N,2,2)*ZH(N,K)
      IF(IDRU.GT.5)WRITE(NOUT,*) ' ME ',K,KS,' M,N ',M,N,EN(K	      IF(IDRU.GT.5)WRITE(NOUT,*) ' ME ',K,KS,' M,N ',M,N,EN(K
1808  CONTINUE							1808  CONTINUE
      EN(KS,K)=EN(KS,K)/SQRT(Q(KS)*Q(K))			      EN(KS,K)=EN(KS,K)/SQRT(Q(KS)*Q(K))
      IF(IDRU.GT.4)WRITE(NOUT,*) ' ME ',K,KS,EN(KS,K)		      IF(IDRU.GT.4)WRITE(NOUT,*) ' ME ',K,KS,EN(KS,K)
1810  CONTINUE							1810  CONTINUE
      DO 751 MW=2,MMM						      DO 751 MW=2,MMM
      DO 751 NW=1,MW-1						      DO 751 NW=1,MW-1
      IF(ABS(EN(MW,NW)-EN(NW,MW)).NE.0.)			      IF(ABS(EN(MW,NW)-EN(NW,MW)).NE.0.)
     * WRITE(NOUT,*) 'M,N ,EN,EN',MW,NW,EN(MW,NW),		     * WRITE(NOUT,*) 'M,N ,EN,EN',MW,NW,EN(MW,NW),
     *               EN(NW,MW)					     *               EN(NW,MW)
751   CONTINUE							751   CONTINUE
      WRITE(NOUT,*) ' TRANSFORMIERTE HAMILTON-MATRIX MIT NORM	      WRITE(NOUT,*) ' TRANSFORMIERTE HAMILTON-MATRIX MIT NORM
      CALL SCHEMA (EN,NX,NX,NDIMD,5)				      CALL SCHEMA (EN,NX,NX,NDIMD,5)
 1811 STOP 'EIGENWERTE DER NORMMATRIX'			      |	1811  STOP 'EIGENWERTE DER NORMMATRIX'
  210 CONTINUE							  210 CONTINUE
      DO 322 M=1,NX						      DO 322 M=1,NX
      DO 322 N=1,NX						      DO 322 N=1,NX
      EN(N,M) =  DM(N,M,2,1)					      EN(N,M) =  DM(N,M,2,1)
  322 H(N,M) =  DM(N,M,2,2)					  322 H(N,M) =  DM(N,M,2,2)
      IERR=0							      IERR=0
C								C
							      >	C     NAGLIB-AUFRUF
							      >	C      CALL F02AEF(H,NDIMD,EN,NDIMD,NX,Q,ZH,NDIMD,FC1,FC2,IER
							      >	      WRITE(NOUT,1004)
							      >	      WRITE(NOUT,1000)(Q(M),M=1,NX)
							      >	C
							      >	C     EISPACK-AUFRUF
							      >	C     CALL RSG(NDIMD,NX,H,EN,Q,1,ZH,FC1,FC2,IERR)
							      >	C
C     LAPACK-AUFRUF						C     LAPACK-AUFRUF
      ITYPE=1							      ITYPE=1
      JOBZ='V'							      JOBZ='V'
      UPLO='U'							      UPLO='U'
      RANGE='A' 						      RANGE='A' 
C     'A' = find 'A'll Eigenvectors, there is an issue when '	C     'A' = find 'A'll Eigenvectors, there is an issue when '
C      IF(NENTP.NE.0) RANGE='I'					C      IF(NENTP.NE.0) RANGE='I'
c     FUER BINDUNGSRECHNUNGEN NUR NZZ EIGENWERTE UND VEKTOREN |	c     FUER BINDUNGSRECHNUNGEN NUR NZZ EIGENWERTE UND VEKTOREN
C      IL= 1						      |	      IL= 1
C      IU= NZZ						      |	      IU= NZZ
      ABSTOL=0.00001						      ABSTOL=0.00001
      LWORK=8*NDIMD						      LWORK=8*NDIMD
      JOBVR='N'						      |	      CALL DSYGVX(ITYPE,JOBZ,RANGE,UPLO,NX,H,NDIMD,EN,NDIMD,V
      JOBVL='N'						      |	     *    IL,IU,ABSTOL,MOUT,Q,ZH,NDIMD,FC1,LWORK,IWORK,IFAIL,

      LDA = NXH						      <
      LDVL = NXH					      <
      LDVR = NXH					      <
C							      <
C      WRITE (NOUT,*) NX,NXH,(( H(M,N),M=1,NX ),N=1,NX)	      <
							      <
C      CALL DGEEV('Vectors','Vectors',NXH, H, NDIMD, WR, WI,  <
C     *            VR, LDVR, WORK, LWORK, INFO )	      <
C      CALL DGEEV('Vectors','Vectors',NXH, EN,NDIMD, WR2,WI2, <
C     *            VR2, LDVR, WORK, LWORK, INFO )	      <
							      <
C   gen ev for real, non-symmetric matrix Hv=lNv	      <
      CALL DGGEV('V','V',NXH,H,NDIMD,EN,NDIMD,WR,WI,WR2,      <
     *    VL, LDVL,VR, LDVR,WORK,LWORK,INFO)      	      <
C      CALL DSYGVX(ITYPE,JOBZ,RANGE,UPLO,NX,H,NDIMD,EN,NDIMD, <
C     *    IL,IU,ABSTOL,MOUT,Q,ZH,NDIMD,FC1,LWORK,IWORK,IFAIL <
      DO 147   M = 1,NX					      <
147   Q(M) = WR(M)/WR2(M)				      <
      DO 149   M = 1,NX					      <
149   Qsrt(M) = Q(M)					      <
							      <
      CALL dlasrt('I',NX,Qsrt,INFO)			      <
      CALL cmpvec( Q, Qsrt, NX, INFU )			      <

      WRITE (NOUT,1101)						      WRITE (NOUT,1101)
      WRITE (NOUT,1000) ( Qsrt(M),M=1,NX )		      |	      WRITE (NOUT,1000) (Q(M),M=1,NX)
							      <
      EOV = Q(1)						      EOV = Q(1)
      IF(IERR.EQ.0) GOTO 950					      IF(IERR.EQ.0) GOTO 950
      WRITE (NOUT,945) IERR					      WRITE (NOUT,945) IERR
945   FORMAT('0 DIAGONALISIERUNG FEHLERHAFT, SIEHE LAPACK MAN	945   FORMAT('0 DIAGONALISIERUNG FEHLERHAFT, SIEHE LAPACK MAN
      WRITE(NOUT,*) ' NOT CONVERGED AT ',(IFAIL(IX),IX=1,NZZ)	      WRITE(NOUT,*) ' NOT CONVERGED AT ',(IFAIL(IX),IX=1,NZZ)
  950 CONTINUE							  950 CONTINUE
C								C
C      NENTP=0,   STREURECHNUNG				      <
C      NENTP=1,   BINDUNGSRECHNUNG FUER UNGEKOPPELTE FUNKTION <
C								C
      IF (NENTP.EQ.0) GOTO 802					      IF (NENTP.EQ.0) GOTO 802
C     BINGUNGSRECHNUNG MIT UND OHNE GEKOPPELTE FUNKTIONEN	C     BINGUNGSRECHNUNG MIT UND OHNE GEKOPPELTE FUNKTIONEN
c      NZZ = MIN0(MAX0(1,NZZ),NX,NDIMD)			      |	      NZZ = MIN0(MAX0(1,NZZ),NX,NZZMAX)
C if the eigensystem is solved without sorting, all EVs have  <
C be calculated						      <
      NZZ = NX      					      <
      DO 800  K=1,NZZ						      DO 800  K=1,NZZ
      KK=K							      KK=K
      IF (IAUW.NE.0)  READ (INPUT,1002)  KK			      IF (IAUW.NE.0)  READ (INPUT,1002)  KK
      WRITE (NOUT,1008)  KK					      WRITE (NOUT,1008)  KK
 1008 FORMAT(//16H ENTWICKLUNG DES,I3,17H TEN EIGENVEKTORS/)	 1008 FORMAT(//16H ENTWICKLUNG DES,I3,17H TEN EIGENVEKTORS/)
      DO 144   M = 1,NX						      DO 144   M = 1,NX
144   QQ(M,K)=VR(M,INFU(KK))				      |	144   QQ(M,K)=ZH(M,KK)
C 144   QQ(M,K)=ZH(M,KK)				      <
      WRITE(NOUT,1007) (QQ(M,K),M,M=1,NX)			      WRITE(NOUT,1007) (QQ(M,K),M,M=1,NX)
  800 CONTINUE							  800 CONTINUE
 1007 FORMAT (4(1PE18.10,' /',I4,')'))				 1007 FORMAT (4(1PE18.10,' /',I4,')'))
      IF (IPLO.LE.0) GOTO 801					      IF (IPLO.LE.0) GOTO 801
      REWIND NBAND9						      REWIND NBAND9
      READ (NBAND9) NY,((EN(N,M),M=1,NY),N=1,NY)		      READ (NBAND9) NY,((EN(N,M),M=1,NY),N=1,NY)
C     HIER WIRD EN TRANSPONIERT EINGELESEN!!!!			C     HIER WIRD EN TRANSPONIERT EINGELESEN!!!!
      DO 5 N=1,NY						      DO 5 N=1,NY
5     QQN(N)=0.							5     QQN(N)=0.
      DO 20 J=1,NY						      DO 20 J=1,NY
      DO 20 I=1,NY						      DO 20 I=1,NY
20    QQN(J)=QQN(J)+EN(I,J)*QQ(I,1)				20    QQN(J)=QQN(J)+EN(I,J)*QQ(I,1)
      WRITE(NOUT,1000)(QQN(N),N=1,NY)				      WRITE(NOUT,1000)(QQN(N),N=1,NY)
       CALL PLOB(EOV,IPLO,NB15,NENTP)				       CALL PLOB(EOV,IPLO,NB15,NENTP)
801   IF (NENTP.EQ.1) GOTO 990					801   IF (NENTP.EQ.1) GOTO 990
C								C
C								C
  802 CONTINUE							  802 CONTINUE
C     STREURECHNUNG UND BINDUNGSRECHNUNG MIT GEKOPPELTEN FUNK	C     STREURECHNUNG UND BINDUNGSRECHNUNG MIT GEKOPPELTEN FUNK
      WRITE(NBAND3) ((ZH(M,N),M=1,NX),N=1,NX)			      WRITE(NBAND3) ((ZH(M,N),M=1,NX),N=1,NX)
      WRITE(NBAND3)(Q(M)  ,M=1,NX)				      WRITE(NBAND3)(Q(M)  ,M=1,NX)
      WRITE(NBAND3)((DM(M,N,2,1),M=1,NX),N=1,NX)		      WRITE(NBAND3)((DM(M,N,2,1),M=1,NX),N=1,NX)
      WRITE(NBAND3)(( DM(M,N,2,2),M=1,NX),N=1,NX)		      WRITE(NBAND3)(( DM(M,N,2,2),M=1,NX),N=1,NX)
C								C
990   RETURN							990   RETURN
      END							      END
      SUBROUTINE UMNORM (NENTP,NBAND9,MEMPT,KPUTZ,IPLO)		      SUBROUTINE UMNORM (NENTP,NBAND9,MEMPT,KPUTZ,IPLO)
      IMPLICIT double precision (A-H,O-Z)		      |	      IMPLICIT REAL*8 (A-H,O-Z)
C								C
        INCLUDE 'par/DR2END_AK'					        INCLUDE 'par/DR2END_AK'
C								C
      COMMON /BIGG/ DM(NDIMD,NDIMD,2,2)				      COMMON /BIGG/ DM(NDIMD,NDIMD,2,2)
C								C
      COMMON /UMNO/ REDM(NZKMAX), NZKA, NZKB, MMM, 		      COMMON /UMNO/ REDM(NZKMAX), NZKA, NZKB, MMM, 
     *              NZQ(NZKMAX+1), LWERT(5,NZKMAX), 		     *              NZQ(NZKMAX+1), LWERT(5,NZKMAX), 
     *              KPK(NZKMAX), MASSE(2,NZKMAX)		     *              KPK(NZKMAX), MASSE(2,NZKMAX)
C								C
      IF (NENTP-1) 2,10,2					      IF (NENTP-1) 2,10,2
C    STREUWELLEN WERDEN ALS FUNKTION DES RELATIVABSTANDES R	C    STREUWELLEN WERDEN ALS FUNKTION DES RELATIVABSTANDES R
C    UND NICHT ALS FUNKTION DER JACOBIKOORDINATE S=REDM**.5*R	C    UND NICHT ALS FUNKTION DER JACOBIKOORDINATE S=REDM**.5*R
C    GENOMMEN							C    GENOMMEN
    2 DO 227   K = 1,NZKA					    2 DO 227   K = 1,NZKA
      LWK=LWERT(4,K)+2*KPK(K)					      LWK=LWERT(4,K)+2*KPK(K)
      DO 227   L = 1,NZKA					      DO 227   L = 1,NZKA
      LWL=LWERT(4,L)+2*KPK(L)					      LWL=LWERT(4,L)+2*KPK(L)
      K1 = NZQ(K) + 1						      K1 = NZQ(K) + 1
      K2 = NZQ(K+1)						      K2 = NZQ(K+1)
      L1 = NZQ(L) + 1						      L1 = NZQ(L) + 1
      L2 = NZQ(L+1)						      L2 = NZQ(L+1)
      A=(REDM(K)**(LWK))*(REDM(L)**(LWL))			      A=(REDM(K)**(LWK))*(REDM(L)**(LWL))
      A = 1./ SQRT(A)						      A = 1./ SQRT(A)
      DO 227 N = L1,L2						      DO 227 N = L1,L2
      DO 227 M = K1,K2						      DO 227 M = K1,K2
      DM(M,N,1,KPUTZ) = A*DM(M,N,1,KPUTZ)			      DM(M,N,1,KPUTZ) = A*DM(M,N,1,KPUTZ)
227   DM(M,N,2,KPUTZ) = A*DM(M,N,2,KPUTZ)			227   DM(M,N,2,KPUTZ) = A*DM(M,N,2,KPUTZ)
C								C
10    IF (MEMPT.NE.1.OR.KPUTZ.NE.1.OR.IPLO.LT.0) GOTO 100	10    IF (MEMPT.NE.1.OR.KPUTZ.NE.1.OR.IPLO.LT.0) GOTO 100
      CALL NOKEHA(NBAND9,IPLO)					      CALL NOKEHA(NBAND9,IPLO)
      IF(NENTP.NE.0) GOTO 1					      IF(NENTP.NE.0) GOTO 1
C								C
100   CONTINUE							100   CONTINUE
      IF(NZKA.EQ.NZKB) GOTO 225					      IF(NZKA.EQ.NZKB) GOTO 225
      K1 = NZQ(NZKB+1) + 1					      K1 = NZQ(NZKB+1) + 1
      K2=NZQ(NZKA+1)						      K2=NZQ(NZKA+1)
      DO 902 K=K1,K2						      DO 902 K=K1,K2
      DO 902 L=1,K2						      DO 902 L=1,K2
      DM(K,L,1,KPUTZ)=DM(K,L,2,KPUTZ)				      DM(K,L,1,KPUTZ)=DM(K,L,2,KPUTZ)
  902 DM(L,K,1,KPUTZ)=DM(L,K,2,KPUTZ)				  902 DM(L,K,1,KPUTZ)=DM(L,K,2,KPUTZ)
  225 CONTINUE							  225 CONTINUE
1     RETURN							1     RETURN
      END							      END
      SUBROUTINE SCHEMA(S,IM1,IM2,JM2,IDH)			      SUBROUTINE SCHEMA(S,IM1,IM2,JM2,IDH)
      IMPLICIT double precision (A-H,O-Z)		      |	      IMPLICIT REAL*8 (A-H,O-Z)
C  AUFRUF VON SCHEMA   (NAME,ZEILENZAHL,SPALTENZAHL,ZEILENDIM	C  AUFRUF VON SCHEMA   (NAME,ZEILENZAHL,SPALTENZAHL,ZEILENDIM
        INCLUDE 'par/DR2END_AK'					        INCLUDE 'par/DR2END_AK'
      DIMENSION S(JM2*IM2)					      DIMENSION S(JM2*IM2)
      CHARACTER*20 ERGL(6),HEAD(6)				      CHARACTER*20 ERGL(6),HEAD(6)
      DATA ERGL/ '(I4,2X,1P5E22.14)', '(I4,2X,1P6E20.12)',	      DATA ERGL/ '(I4,2X,1P5E22.14)', '(I4,2X,1P6E20.12)',
     * '(I4,2X,1P7E18.10)', '(I4,2X,1P8E16.8)', '(I4,2X,1P9E1	     * '(I4,2X,1P7E18.10)', '(I4,2X,1P8E16.8)', '(I4,2X,1P9E1
     * '(I4,2X,1P10E12.4)'/					     * '(I4,2X,1P10E12.4)'/
      DATA HEAD/ '(/,5I22)', '(/,6I20)', '(/,7I18)', '(/,8I16	      DATA HEAD/ '(/,5I22)', '(/,6I20)', '(/,7I18)', '(/,8I16
     *  '(/,9I14)', '(/,10I12)'/				     *  '(/,9I14)', '(/,10I12)'/
      ID=IDH							      ID=IDH
      IF(ID.LT.5) ID=5						      IF(ID.LT.5) ID=5
      IF(ID.GT.10)ID=10						      IF(ID.GT.10)ID=10
      IMGA=IM2/ID						      IMGA=IM2/ID
      IF(IMGA)    10,10,11					      IF(IMGA)    10,10,11
   11 CONTINUE							   11 CONTINUE
      DO 30  LL=1,IMGA						      DO 30  LL=1,IMGA
      LXU=(LL-1)*ID +1						      LXU=(LL-1)*ID +1
      LXO=LL*ID							      LXO=LL*ID
      WRITE(NOUT,HEAD(ID-4))(LO,LO=LXU,LXO)			      WRITE(NOUT,HEAD(ID-4))(LO,LO=LXU,LXO)
      DO 30  K=1,IM1						      DO 30  K=1,IM1
      I1=(LXU-1)*JM2+K						      I1=(LXU-1)*JM2+K
      I2=(LXO-1)*JM2+K						      I2=(LXO-1)*JM2+K
   30 WRITE(NOUT,ERGL(ID-4))K,(S(I),I=I1,I2,JM2)		   30 WRITE(NOUT,ERGL(ID-4))K,(S(I),I=I1,I2,JM2)
   10 CONTINUE							   10 CONTINUE
      LXU=1+IMGA*ID						      LXU=1+IMGA*ID
      IF(LXU-IM2) 2,2,1						      IF(LXU-IM2) 2,2,1
    2 CONTINUE							    2 CONTINUE
      WRITE(NOUT,HEAD(ID-4))(LO,LO=LXU,IM2)			      WRITE(NOUT,HEAD(ID-4))(LO,LO=LXU,IM2)
      DO 100  K=1,IM1						      DO 100  K=1,IM1
      I1=(LXU-1)*JM2+K						      I1=(LXU-1)*JM2+K
      I2=(IM2-1)*JM2+K						      I2=(IM2-1)*JM2+K
  100  WRITE(NOUT,ERGL(ID-4))K,(S(I),I=I1,I2,JM2)		  100  WRITE(NOUT,ERGL(ID-4))K,(S(I),I=I1,I2,JM2)
    1 CONTINUE							    1 CONTINUE
      RETURN							      RETURN
      END							      END
      SUBROUTINE UMKOP(KL,LL,F)					      SUBROUTINE UMKOP(KL,LL,F)
      IMPLICIT double precision (A-H,O-Z)		      |	      IMPLICIT REAL*8 (A-H,O-Z)
C     UMKOP BERECHNET 9J(L1,L2,L3;S1,S2,S3;J1,J2,J3)*		C     UMKOP BERECHNET 9J(L1,L2,L3;S1,S2,S3;J1,J2,J3)*
C      6J(J,S3,L5;L3,L4,J3)*					C      6J(J,S3,L5;L3,L4,J3)*
C       HAT(J1,J2,L3,S3,L5,J3)*(-)**(L5+S3-J)			C       HAT(J1,J2,L3,S3,L5,J3)*(-)**(L5+S3-J)
C								C
        INCLUDE 'par/DR2END_AK'					        INCLUDE 'par/DR2END_AK'
C								C
      COMMON /DREH/ MLWERT(5,NZBMAX),JWERT(3,NZKMAX),		      COMMON /DREH/ MLWERT(5,NZBMAX),JWERT(3,NZKMAX),
     *              MMS(3,NZBMAX),JWS				     *              MMS(3,NZBMAX),JWS
C								C
      FL1=(JWERT(1,KL)+1)*(JWERT(2,KL)+1)*(JWERT(3,KL)+1)	      FL1=(JWERT(1,KL)+1)*(JWERT(2,KL)+1)*(JWERT(3,KL)+1)
     1*(2*MLWERT(3,LL)+1)*(2*MLWERT(5,LL)+1)*(MMS(3,LL)+1)	     1*(2*MLWERT(3,LL)+1)*(2*MLWERT(5,LL)+1)*(MMS(3,LL)+1)
      PHAS=(-1)**((MMS(3,LL) - JWS)/2+MLWERT(5,LL))		      PHAS=(-1)**((MMS(3,LL) - JWS)/2+MLWERT(5,LL))
      F=F9J(2*MLWERT(1,LL),2*MLWERT(2,LL),2*MLWERT(3,LL),	      F=F9J(2*MLWERT(1,LL),2*MLWERT(2,LL),2*MLWERT(3,LL),
     1      MMS(1,LL),MMS(2,LL),MMS(3,LL),			     1      MMS(1,LL),MMS(2,LL),MMS(3,LL),
     2      JWERT(1,KL),JWERT(2,KL),JWERT(3,KL))*		     2      JWERT(1,KL),JWERT(2,KL),JWERT(3,KL))*
     3  F6J(JWS,MMS(3,LL),2*MLWERT(5,LL),			     3  F6J(JWS,MMS(3,LL),2*MLWERT(5,LL),
     4      2*MLWERT(3,LL),2*MLWERT(4,LL),JWERT(3,KL))*SQRT(F	     4      2*MLWERT(3,LL),2*MLWERT(4,LL),JWERT(3,KL))*SQRT(F
      RETURN							      RETURN
      END							      END
      SUBROUTINE NOKEHA(NBAND9,IPLO)				      SUBROUTINE NOKEHA(NBAND9,IPLO)
      IMPLICIT double precision (A-H,O-Z)		      |	      IMPLICIT REAL*8 (A-H,O-Z)
C     FUHERT NORMKERNTRANSFORMATION DURCH			C     FUHERT NORMKERNTRANSFORMATION DURCH
C								C
        INCLUDE 'par/DR2END_AK'					        INCLUDE 'par/DR2END_AK'
C								C
      COMMON /BIGG/ DM(NDIMD,NDIMD,2,2)				      COMMON /BIGG/ DM(NDIMD,NDIMD,2,2)
C								C
      COMMON /UMNO/ REDM(NZKMAX), NZKA, NZKB, MMM, 		      COMMON /UMNO/ REDM(NZKMAX), NZKA, NZKB, MMM, 
     *              NZQ(NZKMAX+1), LWERT(5,NZKMAX), 		     *              NZQ(NZKMAX+1), LWERT(5,NZKMAX), 
     *              KPK(NZKMAX), MASSE(2,NZKMAX)		     *              KPK(NZKMAX), MASSE(2,NZKMAX)
C								C
      COMMON /FAKUL/ FAKU(13)					      COMMON /FAKUL/ FAKU(13)
C								C
      COMMON /STORE/ZH(NDIMD,NDIMD),H(NDIMD,NDIMD), EN(NDIMD,	      COMMON /STORE/ZH(NDIMD,NDIMD),H(NDIMD,NDIMD), EN(NDIMD,
C								C
      DIMENSION EIG(NDIMD),FV1(8*NDIMD),IWORK(5*NDIMD),QN(NDI	      DIMENSION EIG(NDIMD),FV1(8*NDIMD),IWORK(5*NDIMD),QN(NDI
     *          IFAIL(NDIMD)					     *          IFAIL(NDIMD)
c     DIMENSION FV1(NDIMD),FV2(NDIMD)				c     DIMENSION FV1(NDIMD),FV2(NDIMD)
      CHARACTER*1 JOBZ,UPLO, RANGE				      CHARACTER*1 JOBZ,UPLO, RANGE
C 								C 
C								C
      NX=MMM							      NX=MMM
C     EN ENTHAELT DIE GESAMTNORM				C     EN ENTHAELT DIE GESAMTNORM
      DO 10 N=1,NX						      DO 10 N=1,NX
      DO 10 M=1,NX						      DO 10 M=1,NX
      EN(M,N)=DM(M,N,2,1)					      EN(M,N)=DM(M,N,2,1)
10    H(M,N)=DM(M,N,2,1)-DM(M,N,1,1)				10    H(M,N)=DM(M,N,2,1)-DM(M,N,1,1)
C     H ENTHAELT NUR DEN DIREKTEN TERM DER NORM			C     H ENTHAELT NUR DEN DIREKTEN TERM DER NORM
C								C
      WRITE(NOUT, *)'ACHTUNG: UMNOR2 GERUFEN'			      WRITE(NOUT, *)'ACHTUNG: UMNOR2 GERUFEN'
      DO 227   K = 1,NZKA					      DO 227   K = 1,NZKA
      DO 227   L = 1,NZKA					      DO 227   L = 1,NZKA
      K1 = NZQ(K) + 1						      K1 = NZQ(K) + 1
      K2 = NZQ(K+1)						      K2 = NZQ(K+1)
      L1 = NZQ(L) + 1						      L1 = NZQ(L) + 1
      L2 = NZQ(L+1)						      L2 = NZQ(L+1)
      A=(REDM(K)**(1.5))*(REDM(L)**(1.5))			      A=(REDM(K)**(1.5))*(REDM(L)**(1.5))
      A = 1./ SQRT(A)						      A = 1./ SQRT(A)
C								C
C     BEI VERSCHIEDENEN ZERLEGUNGEN MUSS DIE MATRIX A MIT AMO	C     BEI VERSCHIEDENEN ZERLEGUNGEN MUSS DIE MATRIX A MIT AMO
C     MODIFIZIERT WERDEN					C     MODIFIZIERT WERDEN
      IH1=IABS(MASSE(1,K)-MASSE(1,L))				      IH1=IABS(MASSE(1,K)-MASSE(1,L))
      IH2=MAX0(MASSE(1,K),MASSE(1,L))				      IH2=MAX0(MASSE(1,K),MASSE(1,L))
      IH3=MAX0(MASSE(2,K),MASSE(2,L))				      IH3=MAX0(MASSE(2,K),MASSE(2,L))
      AMOD=FAKU(IH1+1)/(FAKU(IH2+1)*FAKU(IH3+1))		      AMOD=FAKU(IH1+1)/(FAKU(IH2+1)*FAKU(IH3+1))
C								C
      DO 227 N = L1,L2						      DO 227 N = L1,L2
      DO 227 M = K1,K2						      DO 227 M = K1,K2
      H(M,N) = A*H(M,N)*AMOD					      H(M,N) = A*H(M,N)*AMOD
227   EN(M,N) = A*EN(M,N)					227   EN(M,N) = A*EN(M,N)
C								C
C     NAGLIB-AUFRUF						C     NAGLIB-AUFRUF
C								C
      IERR=0							      IERR=0
C     CALL F02ABF(H,NDIMD,NX,EIG,ZH,NDIMD,FV1,IERR)		C     CALL F02ABF(H,NDIMD,NX,EIG,ZH,NDIMD,FV1,IERR)
C								C
C     EISPACK-AUFRUF						C     EISPACK-AUFRUF
C								C
C      CALL RS(NDIMD,NX,H,EIG,1,ZH,FV1,FV2,IERR)		C      CALL RS(NDIMD,NX,H,EIG,1,ZH,FV1,FV2,IERR)
C								C
C     LAPACK-AUFRUF						C     LAPACK-AUFRUF
      JOBZ='V'							      JOBZ='V'
      UPLO='U'							      UPLO='U'
      RANGE= 'A'						      RANGE= 'A'
      ABSTOL=0.00001						      ABSTOL=0.00001
      LWORK=8*NDIMD  						      LWORK=8*NDIMD  
       CALL DSYEVX(JOBZ,RANGE,UPLO,NX,H,NDIMD,VL,VU,Il,IU,	       CALL DSYEVX(JOBZ,RANGE,UPLO,NX,H,NDIMD,VL,VU,Il,IU,
     *  ABSTOL, MOUT,EIG,ZH,NDIMD,FV1,LWORK,IWORK,IFAIL,IERR)	     *  ABSTOL, MOUT,EIG,ZH,NDIMD,FV1,LWORK,IWORK,IFAIL,IERR)

C     H DIAGONALISERT						C     H DIAGONALISERT
1001  FORMAT(1X,10E12.5)					1001  FORMAT(1X,10E12.5)
      DO 22 M=1,NX						      DO 22 M=1,NX
22    QN(M)=1./SQRT(EIG(M))					22    QN(M)=1./SQRT(EIG(M))
      DO 220 M=1,NX						      DO 220 M=1,NX
      DO 220 N=1,NX						      DO 220 N=1,NX
      H(M,N)=0.							      H(M,N)=0.
      DO 218 NN=1,NX						      DO 218 NN=1,NX
      DO 218 MM=1,NX						      DO 218 MM=1,NX
218   H(M,N)=H(M,N)+ZH(MM,M)*EN(MM,NN)*ZH(NN,N)			218   H(M,N)=H(M,N)+ZH(MM,M)*EN(MM,NN)*ZH(NN,N)
220   H(M,N)=QN(M)*H(M,N)*QN(N)					220   H(M,N)=QN(M)*H(M,N)*QN(N)
C     GESAMTNORM H TRANSFORMIERT MIT EIGENVEKTOREN DES DIREKT	C     GESAMTNORM H TRANSFORMIERT MIT EIGENVEKTOREN DES DIREKT
C								C
C     NAGLIB-AUFRUF						C     NAGLIB-AUFRUF
C								C
      IERR=0							      IERR=0
C     CALL F02ABF(H,NDIMD,NX,EIG,EN,NDIMD,FV1,IERR)		C     CALL F02ABF(H,NDIMD,NX,EIG,EN,NDIMD,FV1,IERR)
C								C
C     EISPACK-AUFRUF						C     EISPACK-AUFRUF
C								C
C      CALL RS(NDIMD,NX,H,EIG,1,EN,FV1,FV2,IERR)		C      CALL RS(NDIMD,NX,H,EIG,1,EN,FV1,FV2,IERR)
C								C
C								C
       CALL DSYEVX(JOBZ,RANGE,UPLO,NX,H,NDIMD,VL,VU,Il,IU,	       CALL DSYEVX(JOBZ,RANGE,UPLO,NX,H,NDIMD,VL,VU,Il,IU,
     *  ABSTOL, MOUT,EIG,EN,NDIMD,FV1,LWORK,IWORK,IFAIL,IERR)	     *  ABSTOL, MOUT,EIG,EN,NDIMD,FV1,LWORK,IWORK,IFAIL,IERR)

C     GESAMT NORM DIAGONALISIERT				C     GESAMT NORM DIAGONALISIERT
      DO 30 M=1,NX						      DO 30 M=1,NX
30    EIG(M)=SQRT(EIG(M))					30    EIG(M)=SQRT(EIG(M))
      WRITE(NOUT, 34)						      WRITE(NOUT, 34)
34     FORMAT(' EIGENWERTE DER TRANSFORMIERTEN GESAMTNORM **.	34     FORMAT(' EIGENWERTE DER TRANSFORMIERTEN GESAMTNORM **.
       WRITE(NOUT,1001) (EIG(M),M=1,NX)				       WRITE(NOUT,1001) (EIG(M),M=1,NX)
      DO 50 M=1,NX						      DO 50 M=1,NX
      DO 50 N=1,NX						      DO 50 N=1,NX
      H(M,N)=0.							      H(M,N)=0.
      DO 50 J=1,NX						      DO 50 J=1,NX
50    H(M,N)=H(M,N)+EIG(J)*EN(M,J)*EN(N,J)			50    H(M,N)=H(M,N)+EIG(J)*EN(M,J)*EN(N,J)
C     H IST WURZEL AUS DER TRANSFORMIERTEN GESAMTNORM		C     H IST WURZEL AUS DER TRANSFORMIERTEN GESAMTNORM
      DO 60 M=1,NX						      DO 60 M=1,NX
      DO 60 N=1,NX						      DO 60 N=1,NX
60    EN(N,M)=QN(N)*H(N,M)/QN(M)				60    EN(N,M)=QN(N)*H(N,M)/QN(M)
      DO 80 N=1,NX						      DO 80 N=1,NX
      DO 80 M=1,NX						      DO 80 M=1,NX
      H(M,N)=0.							      H(M,N)=0.
      DO 70 MM=1,NX						      DO 70 MM=1,NX
      DO 70 NN=1,NX						      DO 70 NN=1,NX
70    H(M,N)=H(M,N)+ZH(M,NN)*EN(NN,MM)*ZH(N,MM)			70    H(M,N)=H(M,N)+ZH(M,NN)*EN(NN,MM)*ZH(N,MM)
80    CONTINUE							80    CONTINUE
C								C
C     ZUSAETZLICHE FAKTOREN BEI VERSCHIEDENEN FRAGMENTIERUNGE	C     ZUSAETZLICHE FAKTOREN BEI VERSCHIEDENEN FRAGMENTIERUNGE
      MH=0							      MH=0
      DO 184 IH=1,NZKA						      DO 184 IH=1,NZKA
      IH1=MASSE(1,IH)						      IH1=MASSE(1,IH)
      IH2=MASSE(2,IH)						      IH2=MASSE(2,IH)
      AH=1./SQRT(FAKU(IH1+1)*FAKU(IH2+1))			      AH=1./SQRT(FAKU(IH1+1)*FAKU(IH2+1))
      JHA=NZQ(IH)+1						      JHA=NZQ(IH)+1
      JHE=NZQ(IH+1)						      JHE=NZQ(IH+1)
      DO 184 JH=JHA,JHE						      DO 184 JH=JHA,JHE
      MH=MH+1							      MH=MH+1
      DO 184 NH=1,NX						      DO 184 NH=1,NX
      H(MH,NH)=AH*H(MH,NH)					      H(MH,NH)=AH*H(MH,NH)
184   CONTINUE							184   CONTINUE
C								C
      IF(IPLO.LT.3) GOTO 199					      IF(IPLO.LT.3) GOTO 199
      WRITE(NOUT,190)						      WRITE(NOUT,190)
190    FORMAT(' WURZEL AUS DER NORM',/)				190    FORMAT(' WURZEL AUS DER NORM',/)
       CALL SCHEMA(H,NX,NX,NDIMD,10)				       CALL SCHEMA(H,NX,NX,NDIMD,10)
 199  REWIND NBAND9						 199  REWIND NBAND9
      WRITE(NBAND9) NX,((H(M,N),M=1,NX),N=1,NX)			      WRITE(NBAND9) NX,((H(M,N),M=1,NX),N=1,NX)
      RETURN							      RETURN
      END							      END
      SUBROUTINE PLOB(E,IPLO,NB15,NENTP)			      SUBROUTINE PLOB(E,IPLO,NB15,NENTP)
      IMPLICIT double precision (A-H,O-Z)		      |	      IMPLICIT REAL*8 (A-H,O-Z)
C								C
        INCLUDE 'par/DR2END_AK'					        INCLUDE 'par/DR2END_AK'
C								C
      COMMON /PARA/ PAR(MZPARM,NZKMAX),NAR(MZPARM,NZKMAX)	      COMMON /PARA/ PAR(MZPARM,NZKMAX),NAR(MZPARM,NZKMAX)
C								C
      COMMON /POKA/ B, IKAPO(NZKMAX),IZP(NZKMAX),IZQ(NZKMAX+1	      COMMON /POKA/ B, IKAPO(NZKMAX),IZP(NZKMAX),IZQ(NZKMAX+1
     *               NZKAPO,KAPO(NZKMAX),IZPWM			     *               NZKAPO,KAPO(NZKMAX),IZPWM
C								C
      COMMON /DREH/ MLWERT(5,NZBMAX),JWERT(3,NZKMAX),		      COMMON /DREH/ MLWERT(5,NZBMAX),JWERT(3,NZKMAX),
     *              MMS(3,NZBMAX),JWS				     *              MMS(3,NZBMAX),JWS
C								C
      COMMON /UMNO/ REDM(NZKMAX), NZKA, NZKB, MMM, 		      COMMON /UMNO/ REDM(NZKMAX), NZKA, NZKB, MMM, 
     *              NZQ(NZKMAX+1), LWERT(5,NZKMAX), 		     *              NZQ(NZKMAX+1), LWERT(5,NZKMAX), 
     *              KPK(NZKMAX), MASSE(2,NZKMAX)		     *              KPK(NZKMAX), MASSE(2,NZKMAX)
C								C
      COMMON /PLO/ SNORM(NZKMAX), QQN(NDIMD), SWW		      COMMON /PLO/ SNORM(NZKMAX), QQN(NDIMD), SWW
C								C
      COMMON QQ(NDIMD,NDIMD),				      |	      COMMON QQ(NDIMD,NZZMAX),
     *       INPUT						     *       INPUT
C								C
      NX=MMM							      NX=MMM
      REWIND NB15						      REWIND NB15
      NZRW=200							      NZRW=200
      KBIN=2							      KBIN=2
      MM=0							      MM=0
      DO 10 KL=1,NZKA						      DO 10 KL=1,NZKA
      REDMX=REDM(KL)						      REDMX=REDM(KL)
      IF(NENTP.EQ.2.OR.NENTP.EQ.3) REDMX=1.			      IF(NENTP.EQ.2.OR.NENTP.EQ.3) REDMX=1.
C     BEI NENTP=2,3 WERDEN BEREITS RELATIVKOORDINATEN VERWEND	C     BEI NENTP=2,3 WERDEN BEREITS RELATIVKOORDINATEN VERWEND
      WRITE(NB15) NX,KL,NZRW,E,JWS,REDMX,IZP(KL),E,KBIN,LWERT	      WRITE(NB15) NX,KL,NZRW,E,JWS,REDMX,IZP(KL),E,KBIN,LWERT
     1            KL						     1            KL
C     KL IST DIE KANALNUMMER					C     KL IST DIE KANALNUMMER
C     NX IST DIE GESAMTZAHL DER RELATIVWEITEN			C     NX IST DIE GESAMTZAHL DER RELATIVWEITEN
C     JWS=2*J (ENTSPRICHT IM FUPLOT DER METHODE)		C     JWS=2*J (ENTSPRICHT IM FUPLOT DER METHODE)
C     KBIN=2 ERMOEGLICHT IM FUPLOT DAS PLOTTEN DES EFFEKTIVEN	C     KBIN=2 ERMOEGLICHT IM FUPLOT DAS PLOTTEN DES EFFEKTIVEN
C     LWERT(4,KL) IST DER RELATIVDREHIMPULS ZWISCHEN DEN FRAG	C     LWERT(4,KL) IST DER RELATIVDREHIMPULS ZWISCHEN DEN FRAG
      DO 20 K=1,NZRW						      DO 20 K=1,NZRW
      R=SWW*DBLE(K)						      R=SWW*DBLE(K)
      WFB=0.							      WFB=0.
      WFN=0.							      WFN=0.
      MM=IZQ(KL)						      MM=IZQ(KL)
      NZPW=IZP(KL)						      NZPW=IZP(KL)
      AL=DBLE(LWERT(4,KL))					      AL=DBLE(LWERT(4,KL))
      F=REDMX**(AL/2.+.75)					      F=REDMX**(AL/2.+.75)
      DO 30 M=1,NZPW						      DO 30 M=1,NZPW
      MM=MM+1							      MM=MM+1
      A=PAR(M,KL)*REDMX*R*R					      A=PAR(M,KL)*REDMX*R*R
      SW=(R**(AL+1))*EXP(-A)*F					      SW=(R**(AL+1))*EXP(-A)*F
C     PRINT *,' MM,PAR,REDM,SW ',MM,PAR(M,KL),REDM(KL),SW,A	C     PRINT *,' MM,PAR,REDM,SW ',MM,PAR(M,KL),REDM(KL),SW,A
      WFN=WFN+QQN(MM)*SW					      WFN=WFN+QQN(MM)*SW
30    WFB=WFB+QQ(MM,1)*SW					30    WFB=WFB+QQ(MM,1)*SW
      WFN=WFN*SQRT(SNORM(KL))					      WFN=WFN*SQRT(SNORM(KL))
      WFB=WFB*SQRT(SNORM(KL))					      WFB=WFB*SQRT(SNORM(KL))
      WFC=WFB*R*R						      WFC=WFB*R*R
      WRITE(NB15) R,WFB,WFC,WFN					      WRITE(NB15) R,WFB,WFC,WFN
      IF(IPLO.LE.1) GOTO 20					      IF(IPLO.LE.1) GOTO 20
      WRITE(NOUT,1000) R,WFB,WFC,WFN				      WRITE(NOUT,1000) R,WFB,WFC,WFN
C     WFB IST DIE WELLENFUNKTION,WFC =WFB*R*R FUER INTEGRAND 	C     WFB IST DIE WELLENFUNKTION,WFC =WFB*R*R FUER INTEGRAND 
C     WFN IST DIE MIT NORMKERNTRANSFORMIERTE WELLENFUNKTION	C     WFN IST DIE MIT NORMKERNTRANSFORMIERTE WELLENFUNKTION
C     MAL WURZEL-SNORM						C     MAL WURZEL-SNORM
1000  FORMAT(1X,F8.4,5X,3E12.4)					1000  FORMAT(1X,F8.4,5X,3E12.4)
20    CONTINUE							20    CONTINUE
 10   CONTINUE							 10   CONTINUE
      RETURN							      RETURN
      END							      END
      FUNCTION RELEN(P1,B1,M1,P2,B2,M2,L)			      FUNCTION RELEN(P1,B1,M1,P2,B2,M2,L)
      IMPLICIT double precision (A-H,O-Z)		      |	      IMPLICIT REAL*8 (A-H,O-Z)
        INCLUDE 'par/DR2END_AK'					        INCLUDE 'par/DR2END_AK'
C								C
C      RECHNET KINETISCHE ENERGIE DER RELATIVBEWEGUNG		C      RECHNET KINETISCHE ENERGIE DER RELATIVBEWEGUNG
C      (ABER RELATIVISTISCH, GELL!)				C      (ABER RELATIVISTISCH, GELL!)
C      FORMELN UND BEZEICHNUNGEN SIEHE AUFSCHRIEB.		C      FORMELN UND BEZEICHNUNGEN SIEHE AUFSCHRIEB.
C      RUFT FOLGENDE ROUTINEN:					C      RUFT FOLGENDE ROUTINEN:
C             SUBR. LAGER					C             SUBR. LAGER
C             FUNC. XLU						C             FUNC. XLU
C      INPUT: NAME       BEDEUTUNG                  TYP		C      INPUT: NAME       BEDEUTUNG                  TYP
C              P1      POLYNOMGRAD LINKS           INTEGER	C              P1      POLYNOMGRAD LINKS           INTEGER
C              B1      WEITE LINKS                 REAL		C              B1      WEITE LINKS                 REAL
C              M1      MASSE 1. FRAG. IN MEV       REAL		C              M1      MASSE 1. FRAG. IN MEV       REAL
C              P2      POLYNOMGRAD RECHTS          INTEGER	C              P2      POLYNOMGRAD RECHTS          INTEGER
C              B2      WEITE RECHTS                REAL		C              B2      WEITE RECHTS                REAL
C              M2      MASSE 2. FRAG. IN MEV       REAL		C              M2      MASSE 2. FRAG. IN MEV       REAL
C              L       RELATIV DREHIMP.            INTEGER	C              L       RELATIV DREHIMP.            INTEGER
C                      (IST LI. UND RE. SOWIESO			C                      (IST LI. UND RE. SOWIESO
C                       GLEICH)					C                       GLEICH)
C								C
       INTEGER P1, P2, L, MAXDEG, K				       INTEGER P1, P2, L, MAXDEG, K
       double precision  B1, B2, M1, M2, HC, PI, ALPHA, E1, E |	       REAL*8  B1, B2, M1, M2, HC, PI, ALPHA, E1, E2,
     *         FAK, GAMMA, RK, RL, X1, X2, XLU			     *         FAK, GAMMA, RK, RL, X1, X2, XLU
C								C
       PARAMETER (PI=3.141592653589793238, HC=197.32858, MAXD	       PARAMETER (PI=3.141592653589793238, HC=197.32858, MAXD
C								C
       DIMENSION GAMMA(0:2*MAXDEG)				       DIMENSION GAMMA(0:2*MAXDEG)
C								C
       COMMON /KOEF/ GAMMA					       COMMON /KOEF/ GAMMA
C								C
       IF ((P1 .GT. MAXDEG) .OR. (P2 .GT. MAXDEG)) THEN		       IF ((P1 .GT. MAXDEG) .OR. (P2 .GT. MAXDEG)) THEN
          WRITE(NOUT,*)'RELEN: MAXDEG ZU KLEIN: ',MAXDEG,MAX(	          WRITE(NOUT,*)'RELEN: MAXDEG ZU KLEIN: ',MAXDEG,MAX(
          STOP 13						          STOP 13
       ENDIF							       ENDIF
C								C
       RL    = DBLE(L)						       RL    = DBLE(L)
       ALPHA = (1./B1 + 1./B2)/4.				       ALPHA = (1./B1 + 1./B2)/4.
       X1    = ALPHA*(M1/HC)**2					       X1    = ALPHA*(M1/HC)**2
       X2    = ALPHA*(M2/HC)**2					       X2    = ALPHA*(M2/HC)**2
       E1    = 0.						       E1    = 0.
       E2    = 0.						       E2    = 0.
       FAK   = SQRT(PI/(B1+B2))/2.				       FAK   = SQRT(PI/(B1+B2))/2.
C								C
       DO 10 K=0, L-1						       DO 10 K=0, L-1
          RK  = DBLE(K)						          RK  = DBLE(K)
          FAK = FAK*(2.*RK+1.)/(B1+B2)/2.			          FAK = FAK*(2.*RK+1.)/(B1+B2)/2.
10     CONTINUE							10     CONTINUE
       CALL LAGER(P1,P2,B1,B2,L)				       CALL LAGER(P1,P2,B1,B2,L)
       DO 20 K=0, P1+P2						       DO 20 K=0, P1+P2
          RK = DBLE(K)						          RK = DBLE(K)
          FAK = FAK*(2.*(RK+RL)+1.)/(B1+B2)/2.			          FAK = FAK*(2.*(RK+RL)+1.)/(B1+B2)/2.
          E1 = E1 + FAK*M1*((2.*(RK+RL)+3.)*XLU(K+L+2,X1)/X1/	          E1 = E1 + FAK*M1*((2.*(RK+RL)+3.)*XLU(K+L+2,X1)/X1/
     *                      XLU(K+L+1,X1))*GAMMA(K)		     *                      XLU(K+L+1,X1))*GAMMA(K)
          E2 = E2 + FAK*M2*((2.*(RK+RL)+3.)*XLU(K+L+2,X2)/X2/	          E2 = E2 + FAK*M2*((2.*(RK+RL)+3.)*XLU(K+L+2,X2)/X2/
     *                      XLU(K+L+1,X2))*GAMMA(K)		     *                      XLU(K+L+1,X2))*GAMMA(K)
20     CONTINUE							20     CONTINUE
       E1 = E1 - FAK*M1						       E1 = E1 - FAK*M1
       E2 = E2 - FAK*M2						       E2 = E2 - FAK*M2
       RELEN = E1 + E2						       RELEN = E1 + E2
       RETURN							       RETURN
       END							       END
       SUBROUTINE LAGER(P1,P2,B1,B2,L)				       SUBROUTINE LAGER(P1,P2,B1,B2,L)
      IMPLICIT double precision (A-H,O-Z)		      |	      IMPLICIT REAL*8 (A-H,O-Z)
C								C
C      RECHNET GAMMA-QUER-KOEFFIZIENTEN GEM.			C      RECHNET GAMMA-QUER-KOEFFIZIENTEN GEM.
C      AUFSCHRIEB AUS. DIE HEISSEN HIER ALLERDINGS GAMMA.	C      AUFSCHRIEB AUS. DIE HEISSEN HIER ALLERDINGS GAMMA.
C      LAGER RUFT KEINE UNTERPROGRAMME MEHR.			C      LAGER RUFT KEINE UNTERPROGRAMME MEHR.
C								C
       INTEGER P1, P2, L, J, K, N, MAXDEG			       INTEGER P1, P2, L, J, K, N, MAXDEG
       double precision  B1, B2, RP1, RP2, C1, C2, GAMMA, FAK |	       REAL*8  B1, B2, RP1, RP2, C1, C2, GAMMA, FAK,
     *         ALPHA, RK, F					     *         ALPHA, RK, F
C								C
       PARAMETER (MAXDEG=5)					       PARAMETER (MAXDEG=5)
        INCLUDE 'par/DR2END_AK'					        INCLUDE 'par/DR2END_AK'
C								C
       DIMENSION C1(0:MAXDEG), C2(0:MAXDEG),			       DIMENSION C1(0:MAXDEG), C2(0:MAXDEG),
     *           GAMMA(0:2*MAXDEG)				     *           GAMMA(0:2*MAXDEG)
C								C
       COMMON /KOEF/ GAMMA					       COMMON /KOEF/ GAMMA
C								C
       F(N) = DBLE(1-2*MOD(N,2))				       F(N) = DBLE(1-2*MOD(N,2))
C								C
       DATA C1 /MAXDEG*0., 0./					       DATA C1 /MAXDEG*0., 0./
       DATA C2 /MAXDEG*0., 0./					       DATA C2 /MAXDEG*0., 0./
       DATA GAMMA /MAXDEG*0., MAXDEG*0., 0./			       DATA GAMMA /MAXDEG*0., MAXDEG*0., 0./
C								C
       IF ((P1 .GT. MAXDEG) .OR. (P2 .GT. MAXDEG)) THEN		       IF ((P1 .GT. MAXDEG) .OR. (P2 .GT. MAXDEG)) THEN
          WRITE(NOUT,*)'LAGER: MAXDEG ZU KLEIN: ',MAXDEG,MAX(	          WRITE(NOUT,*)'LAGER: MAXDEG ZU KLEIN: ',MAXDEG,MAX(
          STOP 13						          STOP 13
       ENDIF							       ENDIF
C								C
       ALPHA  = DBLE(L) + 0.5					       ALPHA  = DBLE(L) + 0.5
       RP1    = DBLE(P1)					       RP1    = DBLE(P1)
       RP2    = DBLE(P2)					       RP2    = DBLE(P2)
       C1(P1) = F(P1)*(B2/B1)**P1				       C1(P1) = F(P1)*(B2/B1)**P1
       C2(P2) = F(P2)*(B1/B2)**P2				       C2(P2) = F(P2)*(B1/B2)**P2
C								C
       DO 10 K=MAX(P1,P2)-1, 0, -1				       DO 10 K=MAX(P1,P2)-1, 0, -1
          RK  = DBLE(K)						          RK  = DBLE(K)
          FAK = -(ALPHA+RK+1.)*(RK+1.)				          FAK = -(ALPHA+RK+1.)*(RK+1.)
          IF (K .LT. P1) C1(K) = FAK*C1(K+1)/(RP1-RK)/B2	          IF (K .LT. P1) C1(K) = FAK*C1(K+1)/(RP1-RK)/B2
          IF (K .LT. P2) C2(K) = FAK*C2(K+1)/(RP2-RK)/B1	          IF (K .LT. P2) C2(K) = FAK*C2(K+1)/(RP2-RK)/B1
10     CONTINUE							10     CONTINUE
       DO 20 K=0, P1+P2						       DO 20 K=0, P1+P2
          GAMMA(K) = 0.						          GAMMA(K) = 0.
          DO 30 J=MAX(0,K-P2), MIN(K,P1)			          DO 30 J=MAX(0,K-P2), MIN(K,P1)
             GAMMA(K) = GAMMA(K) + C1(J)*C2(K-J)		             GAMMA(K) = GAMMA(K) + C1(J)*C2(K-J)
30        CONTINUE						30        CONTINUE
20     CONTINUE							20     CONTINUE
       RETURN							       RETURN
       END							       END
       FUNCTION XLU(L,X)					       FUNCTION XLU(L,X)
      IMPLICIT double precision (A-H,O-Z)		      |	      IMPLICIT REAL*8 (A-H,O-Z)
C								C
C      RECHNET RATIONALE APPROXIMATION AN			C      RECHNET RATIONALE APPROXIMATION AN
C                  X**(L+.5)*U(L+.5;.5;X)			C                  X**(L+.5)*U(L+.5;.5;X)
C      ALGORITHMUS UND LITERATUR SIEHE AUFSCHRIEB.		C      ALGORITHMUS UND LITERATUR SIEHE AUFSCHRIEB.
C      XLU RUFT KEINE UNTERPROGRAMME.				C      XLU RUFT KEINE UNTERPROGRAMME.
C								C
       INTEGER K, L, SIZE					       INTEGER K, L, SIZE
       double precision  RL, P, PP, XX, Y, Q0, Q1, Q2, C1, D1 |	       REAL*8  RL, P, PP, XX, Y, Q0, Q1, Q2, C1, D1,
     *         G1, G2, G3, A, B, X				     *         G1, G2, G3, A, B, X
C								C
       PARAMETER (SIZE=30)					       PARAMETER (SIZE=30)
C								C
       DIMENSION A(0:SIZE), B(0:SIZE)				       DIMENSION A(0:SIZE), B(0:SIZE)
C								C
       RL    = DBLE(L)						       RL    = DBLE(L)
       P     = (2.*RL+1.)/4.					       P     = (2.*RL+1.)/4.
       XX    = X+X						       XX    = X+X
       Q1    = XX - (P+P)					       Q1    = XX - (P+P)
       A(0)  = 1.						       A(0)  = 1.
       B(0)  = 1.						       B(0)  = 1.
       Q2    = RL + P + 2.					       Q2    = RL + P + 2.
       A(1)  = 1. + Q1/Q2					       A(1)  = 1. + Q1/Q2
       B(1)  = 1. + XX/Q2					       B(1)  = 1. + XX/Q2
       PP    = Q2 + RL + 4.					       PP    = Q2 + RL + 4.
       Q0    = 1. + XX/PP					       Q0    = 1. + XX/PP
       A(2)  = 1. + 6.*P/PP + 3.*Q0*Q1/Q2			       A(2)  = 1. + 6.*P/PP + 3.*Q0*Q1/Q2
       B(2)  = 1. + 3.*XX*Q0/Q2					       B(2)  = 1. + 3.*XX*Q0/Q2
       Y     = 5.						       Y     = 5.
C								C
       DO 10 K=2, SIZE-1					       DO 10 K=2, SIZE-1
          Q0     = Y/(Y-2.)					          Q0     = Y/(Y-2.)
          PP     = PP + Y + RL + 1.				          PP     = PP + Y + RL + 1.
          Q1     = (Y-1.)/PP					          Q1     = (Y-1.)/PP
          C1     = Y*Q1 - 1.					          C1     = Y*Q1 - 1.
          D1     = Y*XX/PP					          D1     = Y*XX/PP
          Q2     = (RL+1.)*Q1					          Q2     = (RL+1.)*Q1
          G1     = D1 + Q0*(C1+Q2)				          G1     = D1 + Q0*(C1+Q2)
          G2     = D1 - C1					          G2     = D1 - C1
          G3     = Q0*(1.-(Q2+Q1+Q1))				          G3     = Q0*(1.-(Q2+Q1+Q1))
          A(K+1) = G1*A(K) + G2*A(K-1) + G3*A(K-2)		          A(K+1) = G1*A(K) + G2*A(K-1) + G3*A(K-2)
          B(K+1) = G1*B(K) + G2*B(K-1) + G3*B(K-2)		          B(K+1) = G1*B(K) + G2*B(K-1) + G3*B(K-2)
          Y      = Y + 2.					          Y      = Y + 2.
10     CONTINUE							10     CONTINUE
       XLU  = A(SIZE)/B(SIZE)					       XLU  = A(SIZE)/B(SIZE)
       RETURN							       RETURN
       END							       END
      DOUBLE PRECISION FUNCTION CLG(J1,J2,J3,M1,M2)		      DOUBLE PRECISION FUNCTION CLG(J1,J2,J3,M1,M2)
C								C
C     CLG BERECHNET DIE CLEBSCH-GORDAN-KOEFFIZIENTEN		C     CLG BERECHNET DIE CLEBSCH-GORDAN-KOEFFIZIENTEN
C     (J1/2,M1/2;J2/2,M2/2|J3/2,(M1+M2)/2) NACH			C     (J1/2,M1/2;J2/2,M2/2|J3/2,(M1+M2)/2) NACH
C     EDMONDS 'ANGULAR MOMENTUM IN QUANTUM MECHANICS',		C     EDMONDS 'ANGULAR MOMENTUM IN QUANTUM MECHANICS',
C     PRINCETON, 1960 GLEICHUNGEN (3.10.60), (3.7.3)		C     PRINCETON, 1960 GLEICHUNGEN (3.10.60), (3.7.3)
C     UND TABELLE 2 (1. GLEICHUNG)				C     UND TABELLE 2 (1. GLEICHUNG)
C								C
C     BENUTZT COMMON /COMY/ MIT DEN LOGRITHMEN DER		C     BENUTZT COMMON /COMY/ MIT DEN LOGRITHMEN DER
C     FAKULTAETEN						C     FAKULTAETEN
C								C
C     M. UNKELBACH 1989						C     M. UNKELBACH 1989
C     LETZTE AENDERUNG: 06.02.89				C     LETZTE AENDERUNG: 06.02.89
C								C
C								C
      INTEGER JW1, JW2, JW3, MW1, MW2, MW3, JSUM, JSUM1,	      INTEGER JW1, JW2, JW3, MW1, MW2, MW3, JSUM, JSUM1,
     *        JDIF1, JDIF2, JDIF3, JMSUM1, JMSUM2, JMSUM3,	     *        JDIF1, JDIF2, JDIF3, JMSUM1, JMSUM2, JMSUM3,
     *        JMDIF1, JMDIF2, JMDIF3, JJM1, JJM2, IMAX, IMIN,	     *        JMDIF1, JMDIF2, JMDIF3, JJM1, JJM2, IMAX, IMIN,
     *        I, J1, J2, J3, M1, M2				     *        I, J1, J2, J3, M1, M2
C								C
      DOUBLE PRECISION FAKLN, CLGH				      DOUBLE PRECISION FAKLN, CLGH
C								C
      COMMON /COMY/ FAKLN(0:99)					      COMMON /COMY/ FAKLN(0:99)
C     FAKLN(I) = LOG(I!)					C     FAKLN(I) = LOG(I!)
C								C
C								C
C								C
C								C
      JW1=J1							      JW1=J1
      JW2=J2							      JW2=J2
      JW3=J3							      JW3=J3
      MW1=M1							      MW1=M1
      MW2=M2							      MW2=M2
C								C
C     CHECK, OB CLG = 0						C     CHECK, OB CLG = 0
      CLG=0.							      CLG=0.
      IF (JW1.LT.IABS(MW1)) RETURN				      IF (JW1.LT.IABS(MW1)) RETURN
      IF (JW2.LT.IABS(MW2)) RETURN				      IF (JW2.LT.IABS(MW2)) RETURN
      IF (JW3.GT.JW1+JW2.OR.JW3.LT.IABS(JW1-JW2)) RETURN	      IF (JW3.GT.JW1+JW2.OR.JW3.LT.IABS(JW1-JW2)) RETURN
      MW3=MW1+MW2						      MW3=MW1+MW2
      IF (JW3.LT.IABS(MW3)) RETURN				      IF (JW3.LT.IABS(MW3)) RETURN
      JMSUM1=JW1+MW1						      JMSUM1=JW1+MW1
      JMSUM2=JW2+MW2						      JMSUM2=JW2+MW2
      JMSUM3=JW3+MW3						      JMSUM3=JW3+MW3
      IF (MOD(JMSUM1,2).EQ.1) RETURN				      IF (MOD(JMSUM1,2).EQ.1) RETURN
      IF (MOD(JMSUM2,2).EQ.1) RETURN				      IF (MOD(JMSUM2,2).EQ.1) RETURN
      IF (MOD(JMSUM3,2).EQ.1) RETURN				      IF (MOD(JMSUM3,2).EQ.1) RETURN
C								C
C								C
      JSUM=(JW1+JW2+JW3)/2					      JSUM=(JW1+JW2+JW3)/2
      JSUM1=JSUM+1						      JSUM1=JSUM+1
      JDIF1=JSUM-JW1						      JDIF1=JSUM-JW1
      JDIF2=JSUM-JW2						      JDIF2=JSUM-JW2
      JDIF3=JSUM-JW3						      JDIF3=JSUM-JW3
C								C
      IF (IABS(MW1)+IABS(MW2).EQ.0) GOTO 100			      IF (IABS(MW1)+IABS(MW2).EQ.0) GOTO 100
C								C
C     NORMALE CLEBSCH-GORDAN-KOEFFIZIENTEN			C     NORMALE CLEBSCH-GORDAN-KOEFFIZIENTEN
      JMSUM1=JMSUM1/2						      JMSUM1=JMSUM1/2
      JMDIF1=JMSUM1-MW1						      JMDIF1=JMSUM1-MW1
      JMSUM2=JMSUM2/2						      JMSUM2=JMSUM2/2
      JMDIF2=JMSUM2-MW2						      JMDIF2=JMSUM2-MW2
      JMSUM3=JMSUM3/2						      JMSUM3=JMSUM3/2
      JMDIF3=JMSUM3-MW3						      JMDIF3=JMSUM3-MW3
      JJM1=JDIF1+JMDIF1						      JJM1=JDIF1+JMDIF1
      JJM2=JDIF3-JMDIF1						      JJM2=JDIF3-JMDIF1
      IMIN=MAX0(0,-JJM2)					      IMIN=MAX0(0,-JJM2)
      IMAX=MIN0(JMDIF1,JMDIF3)					      IMAX=MIN0(JMDIF1,JMDIF3)
C								C
      CLGH=0.							      CLGH=0.
      DO 50, I=IMIN, IMAX					      DO 50, I=IMIN, IMAX
       CLGH=CLGH+DBLE(1-2*MOD(I,2))*				       CLGH=CLGH+DBLE(1-2*MOD(I,2))*
     *     EXP(FAKLN(JMSUM1+I)+FAKLN(JJM1-I)-FAKLN(I)-FAKLN(J	     *     EXP(FAKLN(JMSUM1+I)+FAKLN(JJM1-I)-FAKLN(I)-FAKLN(J
     *         FAKLN(JMDIF3-I)-FAKLN(JJM2+I))			     *         FAKLN(JMDIF3-I)-FAKLN(JJM2+I))
50    CONTINUE							50    CONTINUE
C								C
      IF (IMIN.GT.IMAX) CLGH=1.					      IF (IMIN.GT.IMAX) CLGH=1.
      CLGH=CLGH*EXP((FAKLN(JDIF3)+FAKLN(JMDIF1)+FAKLN(JMDIF2)	      CLGH=CLGH*EXP((FAKLN(JDIF3)+FAKLN(JMDIF1)+FAKLN(JMDIF2)
     *             FAKLN(JMDIF3)+FAKLN(JMSUM3)-FAKLN(JSUM1)-	     *             FAKLN(JMDIF3)+FAKLN(JMSUM3)-FAKLN(JSUM1)-
     *             FAKLN(JDIF1)-FAKLN(JDIF2)-FAKLN(JMSUM1)-	     *             FAKLN(JDIF1)-FAKLN(JDIF2)-FAKLN(JMSUM1)-
     *             FAKLN(JMSUM2)+FAKLN(JW3+1)-FAKLN(JW3))*.5)	     *             FAKLN(JMSUM2)+FAKLN(JW3+1)-FAKLN(JW3))*.5)
      CLG=CLGH*DBLE(1-2*MOD(JMDIF1,2))				      CLG=CLGH*DBLE(1-2*MOD(JMDIF1,2))
C								C
C     ENDE DER BERECHNUNG FUER NORMALE CLEBSCH-GORDAN-KOEFFIZ	C     ENDE DER BERECHNUNG FUER NORMALE CLEBSCH-GORDAN-KOEFFIZ
      RETURN							      RETURN
C								C
C								C
C								C
100   CONTINUE							100   CONTINUE
C     PARITAETSCLEBSCH						C     PARITAETSCLEBSCH
C								C
      IF (MOD(JSUM,2).EQ.1) RETURN				      IF (MOD(JSUM,2).EQ.1) RETURN
C								C
      CLGH=EXP((FAKLN(JDIF1)+FAKLN(JDIF2)+FAKLN(JDIF3)-FAKLN(	      CLGH=EXP((FAKLN(JDIF1)+FAKLN(JDIF2)+FAKLN(JDIF3)-FAKLN(
     *         FAKLN(JW3+1)-FAKLN(JW3))*.5+			     *         FAKLN(JW3+1)-FAKLN(JW3))*.5+
     *        FAKLN(JSUM/2)-FAKLN(JDIF1/2)-FAKLN(JDIF2/2)-	     *        FAKLN(JSUM/2)-FAKLN(JDIF1/2)-FAKLN(JDIF2/2)-
     *        FAKLN(JDIF3/2))					     *        FAKLN(JDIF3/2))
      CLG=CLGH*DBLE(1-2*MOD((JSUM+JW1-JW2)/2,2))		      CLG=CLGH*DBLE(1-2*MOD((JSUM+JW1-JW2)/2,2))
C								C
C								C
C     ENDE DER RECHNUNG FUER PARITAETSCLEBSCH			C     ENDE DER RECHNUNG FUER PARITAETSCLEBSCH
      RETURN							      RETURN
      END							      END
      FUNCTION F6J(JD1,JD2,JD3,LD1,LD2,LD3)			      FUNCTION F6J(JD1,JD2,JD3,LD1,LD2,LD3)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)			      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C     VERSION I F6J FUNCTION CALLS S6J  FORTRAN IV		C     VERSION I F6J FUNCTION CALLS S6J  FORTRAN IV
C     VEREINFACHT 27.9.95 H.M.H					C     VEREINFACHT 27.9.95 H.M.H
      J1=JD1							      J1=JD1
      J2=JD2							      J2=JD2
      J3=JD3							      J3=JD3
      L1=LD1							      L1=LD1
      L2=LD2							      L2=LD2
      L3=LD3							      L3=LD3
C     ANGULAR MOMENTUM COUPLING TESTS FOR 6J COEFFICIENT	C     ANGULAR MOMENTUM COUPLING TESTS FOR 6J COEFFICIENT
      F6J=0.0							      F6J=0.0
      IF(J1.LT.0 .OR. J2.LT.0 .OR. J3.LT.0) RETURN		      IF(J1.LT.0 .OR. J2.LT.0 .OR. J3.LT.0) RETURN
      IF(L1.LT.0 .OR. L2.LT.0 .OR. L3.LT.0) RETURN		      IF(L1.LT.0 .OR. L2.LT.0 .OR. L3.LT.0) RETURN
      IF(MOD(J1+J2+J3,2).NE.0) RETURN				      IF(MOD(J1+J2+J3,2).NE.0) RETURN
      IF(J3.GT.J1+J2 .OR. J3.LT.ABS(J1-J2)) RETURN		      IF(J3.GT.J1+J2 .OR. J3.LT.ABS(J1-J2)) RETURN
      IF(MOD(J1+L2+L3,2).NE.0) RETURN				      IF(MOD(J1+L2+L3,2).NE.0) RETURN
      IF(L3.GT.J1+L2 .OR. L3.LT.ABS(J1-L2)) RETURN		      IF(L3.GT.J1+L2 .OR. L3.LT.ABS(J1-L2)) RETURN
      IF(MOD(L1+J2+L3,2).NE.0) RETURN				      IF(MOD(L1+J2+L3,2).NE.0) RETURN
      IF(L3.GT.L1+J2 .OR. L3.LT.ABS(L1-J2)) RETURN		      IF(L3.GT.L1+J2 .OR. L3.LT.ABS(L1-J2)) RETURN
      IF(MOD(L1+L2+J3,2).NE.0) RETURN				      IF(MOD(L1+L2+J3,2).NE.0) RETURN
      IF(J3.GT.L1+L2 .OR. J3.LT.ABS(L1-L2)) RETURN		      IF(J3.GT.L1+L2 .OR. J3.LT.ABS(L1-L2)) RETURN
      F6J=S6J(J1,J2,J3,L1,L2,L3)				      F6J=S6J(J1,J2,J3,L1,L2,L3)
      RETURN							      RETURN
      END							      END
      FUNCTION F9J(JD1,JD2,JD3,JD4,JD5,JD6,JD7,JD8,JD9)		      FUNCTION F9J(JD1,JD2,JD3,JD4,JD5,JD6,JD7,JD8,JD9)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)			      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C     F9J VERSION I  CALLS S6J  FORTRAN IV			C     F9J VERSION I  CALLS S6J  FORTRAN IV
C     VEREINFACHT 27.9.95 H.M.H.				C     VEREINFACHT 27.9.95 H.M.H.
      DIMENSION KN(6),KX(6),NN(6)				      DIMENSION KN(6),KX(6),NN(6)
      J1=JD1   							      J1=JD1   
      J2=JD2  							      J2=JD2  
      J3=JD3 							      J3=JD3 
      J4=JD4							      J4=JD4
      J5=JD5							      J5=JD5
      J6=JD6							      J6=JD6
      J7=JD7							      J7=JD7
      J8=JD8							      J8=JD8
      J9=JD9							      J9=JD9
      F9J= 0.0							      F9J= 0.0
C     ANGULAR MOMENTUM COUPLING TESTS FOR 9J COEFFICIENT 	C     ANGULAR MOMENTUM COUPLING TESTS FOR 9J COEFFICIENT 
      IF(MOD(J1+J2+J3,2).NE.0) RETURN				      IF(MOD(J1+J2+J3,2).NE.0) RETURN
      IF(J3.GT.J1+J2 .OR. J3.LT.ABS(J1-J2)) RETURN		      IF(J3.GT.J1+J2 .OR. J3.LT.ABS(J1-J2)) RETURN
      IF(MOD(J4+J5+J6,2).NE.0) RETURN				      IF(MOD(J4+J5+J6,2).NE.0) RETURN
      IF(J6.GT.J4+J5 .OR. J6.LT.ABS(J4-J5)) RETURN		      IF(J6.GT.J4+J5 .OR. J6.LT.ABS(J4-J5)) RETURN
      IF(MOD(J7+J8+J9,2).NE.0) RETURN				      IF(MOD(J7+J8+J9,2).NE.0) RETURN
      IF(J9.GT.J7+J8 .OR. J9.LT.ABS(J7-J8)) RETURN		      IF(J9.GT.J7+J8 .OR. J9.LT.ABS(J7-J8)) RETURN
      IF(MOD(J1+J4+J7,2).NE.0) RETURN				      IF(MOD(J1+J4+J7,2).NE.0) RETURN
      IF(J7.GT.J1+J4 .OR. J7.LT.ABS(J1-J4)) RETURN		      IF(J7.GT.J1+J4 .OR. J7.LT.ABS(J1-J4)) RETURN
      IF(MOD(J2+J5+J8,2).NE.0) RETURN				      IF(MOD(J2+J5+J8,2).NE.0) RETURN
      IF(J8.GT.J2+J5 .OR. J8.LT.ABS(J2-J5)) RETURN		      IF(J8.GT.J2+J5 .OR. J8.LT.ABS(J2-J5)) RETURN
      IF(MOD(J3+J6+J9,2).NE.0) RETURN				      IF(MOD(J3+J6+J9,2).NE.0) RETURN
      IF(J9.GT.J3+J6 .OR. J9.LT.ABS(J3-J6)) RETURN		      IF(J9.GT.J3+J6 .OR. J9.LT.ABS(J3-J6)) RETURN
      KN(1)=MAX0(IABS(J2-J6),IABS(J1-J9),IABS(J4-J8))		      KN(1)=MAX0(IABS(J2-J6),IABS(J1-J9),IABS(J4-J8))
      KN(2)=MAX0(IABS(J2-J7),IABS(J5-J9),IABS(J4-J3))		      KN(2)=MAX0(IABS(J2-J7),IABS(J5-J9),IABS(J4-J3))
      KN(3)=MAX0(IABS(J6-J7),IABS(J5-J1),IABS(J8-J3))		      KN(3)=MAX0(IABS(J6-J7),IABS(J5-J1),IABS(J8-J3))
      KN(4)=MAX0(IABS(J6-J1),IABS(J2-J9),IABS(J5-J7))		      KN(4)=MAX0(IABS(J6-J1),IABS(J2-J9),IABS(J5-J7))
      KN(5)=MAX0(IABS(J2-J4),IABS(J3-J7),IABS(J6-J8))		      KN(5)=MAX0(IABS(J2-J4),IABS(J3-J7),IABS(J6-J8))
      KN(6)=MAX0(IABS(J3-J5),IABS(J1-J8),IABS(J4-J9))		      KN(6)=MAX0(IABS(J3-J5),IABS(J1-J8),IABS(J4-J9))
      KX(1)=MIN0(J2+J6,J1+J9,J4+J8)				      KX(1)=MIN0(J2+J6,J1+J9,J4+J8)
      KX(2)=MIN0(J2+J7,J5+J9,J4+J3)				      KX(2)=MIN0(J2+J7,J5+J9,J4+J3)
      KX(3)=MIN0(J6+J7,J5+J1,J8+J3)				      KX(3)=MIN0(J6+J7,J5+J1,J8+J3)
      KX(4)=MIN0(J1+J6,J2+J9,J5+J7)				      KX(4)=MIN0(J1+J6,J2+J9,J5+J7)
      KX(5)=MIN0(J2+J4,J3+J7,J6+J8)				      KX(5)=MIN0(J2+J4,J3+J7,J6+J8)
      KX(6)=MIN0(J3+J5,J1+J8,J4+J9)				      KX(6)=MIN0(J3+J5,J1+J8,J4+J9)
      DO 35 K=1,6						      DO 35 K=1,6
   35 NN(K)=KX(K)-KN(K)						   35 NN(K)=KX(K)-KN(K)
      KSIGN=1							      KSIGN=1
      I=MIN0(NN(1),NN(2),NN(3),NN(4),NN(5),NN(6))		      I=MIN0(NN(1),NN(2),NN(3),NN(4),NN(5),NN(6))
      DO 40 K=1,6						      DO 40 K=1,6
      IF(I-NN(K))40,50,40					      IF(I-NN(K))40,50,40
   40 CONTINUE							   40 CONTINUE
   50 KMIN=KN(K)+1						   50 KMIN=KN(K)+1
      KMAX=KX(K)+1						      KMAX=KX(K)+1
      GO TO(130,52,53,54,55,56),K				      GO TO(130,52,53,54,55,56),K
   52 J=J1							   52 J=J1
      J1=J5							      J1=J5
      J5=J							      J5=J
      J=J3							      J=J3
      J3=J8							      J3=J8
      J8=J							      J8=J
      J=J6							      J=J6
      J6=J7							      J6=J7
      J7=J							      J7=J
      GO TO 130							      GO TO 130
   53 J=J2							   53 J=J2
      J2=J7							      J2=J7
      J7=J							      J7=J
      J=J3							      J=J3
      J3=J4							      J3=J4
      J4=J							      J4=J
      J=J5							      J=J5
      J5=J9							      J5=J9
      J9=J							      J9=J
      GO TO 130							      GO TO 130
   54 J=J1							   54 J=J1
      J1=J2							      J1=J2
      J2=J							      J2=J
      J=J4							      J=J4
      J4=J5							      J4=J5
      J5=J							      J5=J
      J=J7							      J=J7
      J7=J8							      J7=J8
      J8=J							      J8=J
      GO TO 120							      GO TO 120
   55 J=J1							   55 J=J1
      J1=J3							      J1=J3
      J3=J							      J3=J
      J=J4							      J=J4
      J4=J6							      J4=J6
      J6=J							      J6=J
      J=J7							      J=J7
      J7=J9							      J7=J9
      J9=J							      J9=J
      GO TO 120							      GO TO 120
   56 J=J2							   56 J=J2
      J2=J3							      J2=J3
      J3=J							      J3=J
      J=J5							      J=J5
      J5=J6							      J5=J6
      J6=J							      J6=J
      J=J8							      J=J8
      J8=J9							      J8=J9
      J9=J							      J9=J
  120 KSIGN=(1-MOD(J1+J2+J3+J4+J5+J6+J7+J8+J9,4))		  120 KSIGN=(1-MOD(J1+J2+J3+J4+J5+J6+J7+J8+J9,4))
C     SUMMATION OF SERIES OF EQUATION (2)  			C     SUMMATION OF SERIES OF EQUATION (2)  
  130 SUM=0.0                             			  130 SUM=0.0                             
      SIG=(-1)**(KMIN-1)*KSIGN					      SIG=(-1)**(KMIN-1)*KSIGN
      FLK=KMIN                           			      FLK=KMIN                           
      DO 200 K=KMIN,KMAX,2              			      DO 200 K=KMIN,KMAX,2              
      TERM=FLK*S6J(J1,J4,J7,J8,J9,K-1)*S6J(J2,J5,J8,J4,K-1,J6	      TERM=FLK*S6J(J1,J4,J7,J8,J9,K-1)*S6J(J2,J5,J8,J4,K-1,J6
     1*S6J(J3,J6,J9,K-1,J1,J2)					     1*S6J(J3,J6,J9,K-1,J1,J2)
      FLK=FLK+2.0                    				      FLK=FLK+2.0                    
  200 SUM=SUM+TERM                    				  200 SUM=SUM+TERM                    
      F9J=SUM*SIG						      F9J=SUM*SIG
      RETURN                       				      RETURN                       
      END                         				      END                         
      FUNCTION S6J(JD1,JD2,JD3,LD1,LD2,LD3)			      FUNCTION S6J(JD1,JD2,JD3,LD1,LD2,LD3)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)			      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C     VERSION I  FORTRAN IV					C     VERSION I  FORTRAN IV
      DIMENSION MA(4),MB(3),MED(12)				      DIMENSION MA(4),MB(3),MED(12)
      COMMON /FACT/FL(322),NCALL				      COMMON /FACT/FL(322),NCALL
      DATA NCALL/1/						      DATA NCALL/1/
      J1=JD1							      J1=JD1
      J2=JD2							      J2=JD2
      J3=JD3							      J3=JD3
      L1=LD1							      L1=LD1
      L2=LD2							      L2=LD2
      L3=LD3							      L3=LD3
C     DETERMINE WHETHER TO CALCULATE FL(N) S			C     DETERMINE WHETHER TO CALCULATE FL(N) S
      IF(NCALL.EQ.0) GOTO 15					      IF(NCALL.EQ.0) GOTO 15
      NCALL=0							      NCALL=0
C     CALCULATE FL(N) S						C     CALCULATE FL(N) S
      FL(1)=0.0							      FL(1)=0.0
      FL(2)=0.0							      FL(2)=0.0
      DO 50 N= 3,322						      DO 50 N= 3,322
      FN=N-1							      FN=N-1
   50 FL(N)=FL(N-1)+LOG(FN)					   50 FL(N)=FL(N-1)+LOG(FN)
   15 MED(1)=(-J1+J2+J3)/2					   15 MED(1)=(-J1+J2+J3)/2
      MED(2)=(+J1-J2+J3)/2					      MED(2)=(+J1-J2+J3)/2
      MED(3)=(+J1+J2-J3)/2					      MED(3)=(+J1+J2-J3)/2
      MED(4)=(-J1+L2+L3)/2					      MED(4)=(-J1+L2+L3)/2
      MED(5)=(+J1-L2+L3)/2					      MED(5)=(+J1-L2+L3)/2
      MED(6)=(+J1+L2-L3)/2					      MED(6)=(+J1+L2-L3)/2
      MED(7)=(-L1+J2+L3)/2					      MED(7)=(-L1+J2+L3)/2
      MED(8)=(+L1-J2+L3)/2					      MED(8)=(+L1-J2+L3)/2
      MED(9)=(+L1+J2-L3)/2					      MED(9)=(+L1+J2-L3)/2
      MED(10)=(-L1+L2+J3)/2					      MED(10)=(-L1+L2+J3)/2
      MED(11)=(+L1-L2+J3)/2					      MED(11)=(+L1-L2+J3)/2
      MED(12)=(+L1+L2-J3)/2					      MED(12)=(+L1+L2-J3)/2
      MA(1)=MED(1)+MED(2)+MED(3)				      MA(1)=MED(1)+MED(2)+MED(3)
      MA(2)=MED(4)+MED(5)+MED(6)				      MA(2)=MED(4)+MED(5)+MED(6)
      MA(3)=MED(7)+MED(8)+MED(9)				      MA(3)=MED(7)+MED(8)+MED(9)
      MA(4)=MED(10)+MED(11)+MED(12)				      MA(4)=MED(10)+MED(11)+MED(12)
      MB(1)=MA(1)+MED(12)					      MB(1)=MA(1)+MED(12)
      MB(2)=MA(1)+MED(4)					      MB(2)=MA(1)+MED(4)
      MB(3)=MA(1)+MED(8)					      MB(3)=MA(1)+MED(8)
C     DETERMINE MAXIMUM OF (J1+J2+J3),(J1+L2+L3),(L1+J2+L3),(	C     DETERMINE MAXIMUM OF (J1+J2+J3),(J1+L2+L3),(L1+J2+L3),(
      MAX=MA(1)							      MAX=MA(1)
      DO 30 N=2,4						      DO 30 N=2,4
      IF (MAX-MA(N)) 20,30,30					      IF (MAX-MA(N)) 20,30,30
   20 MAX=MA(N)							   20 MAX=MA(N)
   30 CONTINUE							   30 CONTINUE
C     DETERMINE MINIMUM OF (J1+J2+L1+L2), (J2+J3+L2+L3),(J3+J	C     DETERMINE MINIMUM OF (J1+J2+L1+L2), (J2+J3+L2+L3),(J3+J
      MIN=MB(1)							      MIN=MB(1)
      DO 51 N=2,3						      DO 51 N=2,3
      IF (MIN-MB(N)) 51,51,40					      IF (MIN-MB(N)) 51,51,40
   40 MIN=MB(N)							   40 MIN=MB(N)
   51 CONTINUE							   51 CONTINUE
      MINH=MIN							      MINH=MIN
      KMAX=MIN-MAX						      KMAX=MIN-MAX
      MINP1=MIN+1						      MINP1=MIN+1
      MINI  =MINP1-MA(1)					      MINI  =MINP1-MA(1)
      MIN2=MINP1-MA(2)						      MIN2=MINP1-MA(2)
      MIN3=MINP1-MA(3)						      MIN3=MINP1-MA(3)
      MIN4=MINP1-MA(4)						      MIN4=MINP1-MA(4)
      MIN5=MINP1+1						      MIN5=MINP1+1
      MIN6=MB(1)-MIN						      MIN6=MB(1)-MIN
      MIN7=MB(2)-MIN						      MIN7=MB(2)-MIN
      MIN8=MB(3)-MIN						      MIN8=MB(3)-MIN
      UK=1.E-15							      UK=1.E-15
      S=1.0E-15							      S=1.0E-15
      IF (KMAX) 65,65,55					      IF (KMAX) 65,65,55
   55 DO 60 K=1,KMAX						   55 DO 60 K=1,KMAX
      UK=-UK*DBLE(MINI-K)*DBLE(MIN2-K)*DBLE(MIN3-K)*DBLE(MIN4	      UK=-UK*DBLE(MINI-K)*DBLE(MIN2-K)*DBLE(MIN3-K)*DBLE(MIN4
     1 (DBLE(MIN5-K)*DBLE(MIN6+K)*DBLE(MIN7+K)*DBLE(MIN8+K))	     1 (DBLE(MIN5-K)*DBLE(MIN6+K)*DBLE(MIN7+K)*DBLE(MIN8+K))
C     CUT OFF SERIES AT 1.0D-25					C     CUT OFF SERIES AT 1.0D-25
      IF(ABS(UK)-1.E-25) 65,60,60				      IF(ABS(UK)-1.E-25) 65,60,60
   60 S=S+UK							   60 S=S+UK
   65 S=S*1.0E+15						   65 S=S*1.0E+15
C     CALCULATE DELTA FUNCTIONS					C     CALCULATE DELTA FUNCTIONS
      DELOG=0.0							      DELOG=0.0
      DO 70 N=1,12						      DO 70 N=1,12
      NUM=MED(N)						      NUM=MED(N)
   70 DELOG=DELOG+FL(NUM+1)					   70 DELOG=DELOG+FL(NUM+1)
      NUM1=MA(1)+2						      NUM1=MA(1)+2
      NUM2=MA(2)+2						      NUM2=MA(2)+2
      NUM3=MA(3)+2						      NUM3=MA(3)+2
      NUM4=MA(4)+2						      NUM4=MA(4)+2
      DELOG=DELOG-FL(NUM1)-FL(NUM2)-FL(NUM3)-FL(NUM4)		      DELOG=DELOG-FL(NUM1)-FL(NUM2)-FL(NUM3)-FL(NUM4)
      DELOG=0.5*DELOG						      DELOG=0.5*DELOG
      ULOG=FL(MIN5)-FL(MINI)-FL(MIN2)-FL(MIN3)-FL(MIN4)-FL(MI	      ULOG=FL(MIN5)-FL(MINI)-FL(MIN2)-FL(MIN3)-FL(MIN4)-FL(MI
     1   FL(MIN7+1)-FL(MIN8+1)					     1   FL(MIN7+1)-FL(MIN8+1)
      PLOG=DELOG+ULOG						      PLOG=DELOG+ULOG
      P=EXP (PLOG)						      P=EXP (PLOG)
      S6J=P*S							      S6J=P*S
      IF(MOD(MINH,2).NE.0)  S6J=-S6J				      IF(MOD(MINH,2).NE.0)  S6J=-S6J
      RETURN							      RETURN
      END							      END
							      <
      SUBROUTINE cmpvec( vunsrt, vsrt, dim, idx )	      <
C  returns the index of an element of <vunsrt> in <vsrt>      <
      INTEGER            dim				      <
      INTEGER            idx( dim )			      <
      double precision             vunsrt( dim ), vsrt( dim ) <
 							      <
      do 551 n1=1,dim					      <
        						      <
        do 552 n2=1,dim					      <
C         where is the lowest, next-to-lowest, ... entry to b <
C         found in the *unsorted* vector?		      <
          IF (vsrt(n1).EQ.vunsrt(n2)) THEN		      <
            idx(n1) = n2				      <
          endif						      <
  552   continue					      <
      if(idx(n1).EQ.0) THEN				      <
        print *,'eigenvalue sorting failed!'		      <
        stop						      <
      endif						      <
  551 continue 						      <
							      <
							      <
      RETURN						      <
      END						      <